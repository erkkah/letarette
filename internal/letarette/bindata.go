// Code generated for package letarette by go-bindata DO NOT EDIT. (@generated)
// sources:
// migrations/1_init.down.sql
// migrations/1_init.up.sql
// queries/search_1.sql
// queries/search_2.sql
package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\xc1\x09\xc0\x20\x10\x04\xc0\xff\x55\x61\x1f\x56\x73\xd1\x0d\x04\x72\x51\x6e\xb7\x7f\xf2\x55\xbf\xc3\xf4\x1c\xb3\xc8\xaf\x17\x25\x20\xaf\x66\x8b\x70\x7a\x03\x77\x7b\x3e\x21\x41\xed\xda\x47\x3b\xde\xad\x03\x28\x44\x20\x29\x17\xaa\xfd\x01\x00\x00\xff\xff\xba\x85\x82\xe2\x78\x00\x00\x00")

func migrations1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initDownSql,
		"migrations/1_init.down.sql",
	)
}

func migrations1_initDownSql() (*asset, error) {
	bytes, err := migrations1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.down.sql", size: 120, mode: os.FileMode(436), modTime: time.Unix(1573593606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\xf6\x22\x1b\xa0\x83\x74\xb7\x7b\x4a\x7d\x28\x62\xa0\xc8\xa5\x97\xee\x9e\x03\x5a\x1c\x49\x03\x53\xa4\x4b\x8e\x62\xa7\xbf\xbe\xe0\x43\xf2\x43\x5a\x27\x01\xda\x3d\x99\xca\x90\xc3\xef\x31\x33\xcc\x6a\x05\x4f\x46\xe1\x11\x3a\x64\x09\x4a\xb2\x2c\x2a\x87\x92\x11\x58\x6e\x35\x02\xd5\x60\x2c\x03\x1e\xc9\xb3\x4f\x9b\x16\x05\x00\xc0\x6a\x05\xdf\x0d\xfd\xdd\x23\x90\x82\xda\x3a\xe0\x96\x3c\x50\xc8\x15\xe3\x71\xf5\xb4\x01\xc6\x23\xc7\x14\xa6\xd7\x5a\xc4\x50\xba\x40\x01\x53\x87\x9e\x65\xb7\x07\x85\xb5\xec\x35\x43\xd5\x3b\x87\x86\x9f\xc7\x48\xb1\x7c\x28\x8a\xd5\x0a\xfe\x42\xe9\xaa\x16\xfc\x5e\x56\xe8\x05\xa0\xac\x5a\x38\x10\xb7\xc0\x2d\x92\x03\x7b\x30\xe9\x42\xe8\xf7\x2a\x80\xdf\x5b\x4f\x4c\xd6\xdc\x22\x93\x92\x25\x36\x71\xfd\xb4\x01\x32\x8c\x0d\x3a\xd8\x3b\xea\xa4\x7b\x85\x1d\xbe\x8a\xd3\x86\x4b\x32\xd0\x47\xfe\xa2\x18\xf4\x48\x08\x86\xab\x4f\xf4\x62\x5c\x4b\xcf\xdf\x23\x38\xf5\x3b\xff\x29\x8d\xf5\xe3\x65\x97\xea\x4c\x13\x29\x5b\xf5\x1d\x1a\x7e\xda\x5c\x67\xda\xd8\xea\x5a\xe2\x51\xcb\x4f\x9f\xce\xf2\x31\x3a\xf4\x0c\x9a\x3c\x27\xf9\x67\x00\x92\xe7\xc7\xe4\xcc\x8f\x00\x8e\xb9\xef\x33\xe9\xaa\xc5\x6a\x97\x14\xfc\x01\xc7\xdf\xd6\x33\x89\xe3\x81\xe5\xe0\xed\xb7\x16\x13\x30\x5b\x8f\x54\x3d\x1c\x10\xa4\xc3\xa1\x22\xf4\xeb\x48\x02\x15\x90\x81\x06\x99\xc9\x34\xd9\x6f\x75\xcb\xe7\xe1\xe0\xbc\xd3\x97\xe2\xab\xa9\xa0\xd9\x7f\x0e\xe9\x27\x87\x86\xfb\xdf\xd6\x2b\x24\x49\x05\xb3\xc8\x10\x44\xba\x6d\x19\x43\xb5\x75\x48\x8d\x09\x05\x07\xc3\x86\x25\x38\xac\xd1\xa1\xa9\x70\xac\xd6\x21\x34\x88\xb7\xc9\x82\x65\xe6\xa9\x27\x1c\x35\x0d\x3a\x0f\x6c\x61\x87\xb8\x0f\x4d\x02\x75\xc0\x13\x89\x9d\x37\xca\x4d\xe1\x94\xad\x72\x7b\x90\x7a\xa3\x33\x3e\x2e\xe8\x4d\xe1\xd2\x16\x26\xd6\x38\x77\x96\x8f\x3c\xf7\x67\xa9\xe9\x05\x61\x6b\xad\x46\x69\xa6\x26\xb0\x0b\xcd\xfa\x7f\xf8\x90\x35\x4c\xc2\x4e\x35\x7c\x8e\x9b\xd3\x68\x4c\xed\x7c\x3a\x7f\x3a\x9d\x5d\x9b\x3b\x2f\x09\x64\xcd\x21\x66\x3c\x3a\x86\x9c\x04\xb6\xd8\x90\xc9\xd3\x36\x06\xc8\xb0\x85\x9a\xfd\xc2\xd9\x03\x29\x91\x14\x14\x41\xaf\x25\xbc\x48\xdd\xa3\x87\x85\xc1\xc3\x5d\x88\x85\xdf\x1c\x8f\xcb\x23\x2f\x1f\x0a\x34\xea\x7d\x88\x54\x46\xa4\x50\x23\xe3\x3b\x10\xd5\xec\x05\xdc\x80\x55\xa6\x4c\xa5\x00\xab\x55\x04\x18\x7e\xf3\xce\xb8\xfc\x18\xc0\x3e\x03\xcc\x0f\xc2\x4f\x03\xf8\xdf\xbb\xb1\x5a\xc1\x63\x9a\x82\xe0\x19\xbb\x0e\x1d\x54\xd6\xd4\xd4\xf4\x4e\xbe\xf9\xc6\xa5\x03\x69\x7a\x2d\xf2\xf3\x61\x9a\x5e\x36\xe8\xe7\x5a\xc8\x61\x67\x5f\x70\x43\xb2\x72\xc4\x14\xf4\xba\xea\xa6\xdc\x80\x76\x87\xe6\xb1\x95\x4e\x56\x1c\x07\xcd\xcc\xc0\xc4\xbd\x74\x92\xed\x7c\x34\x77\xff\xbb\xff\x05\xb8\x69\xf8\x39\xc9\x6b\xe3\x0b\x5b\x9f\x18\x8b\x09\x3f\x71\x4d\x45\x9c\x01\x0f\xcd\x7a\x21\xe0\xa9\x78\x72\x55\x5d\x44\x3d\xf2\xc8\x6b\x3d\xe5\x71\x66\xe7\xb7\xe9\x3c\x1e\x18\xbe\x90\xe3\x5e\xea\x59\x33\x6b\xf6\xd0\xfb\xf0\xea\xd5\xec\xbf\x2e\x4e\x33\x32\xd6\x94\x08\x55\xc1\x68\x78\x5d\x86\x4a\x2f\xc7\xef\xe7\x58\x7e\xeb\x92\x54\x79\xe6\x1e\xfd\x83\xeb\xd2\x1b\x7b\xd8\x4a\xad\x4b\x01\x7b\x87\x35\x1d\xd7\xe5\x67\xf8\x02\xbf\x96\xc3\xf3\xf2\x47\x98\xa8\xf1\x0e\x0f\xdc\x3a\xc4\xe4\x58\x7c\x51\x0e\x48\x4d\x1b\x5f\xed\xf0\x15\xa9\x6c\xad\x7a\x2d\xae\xaa\x1f\x72\x67\x49\xb3\x1b\xca\x7e\x51\x86\xaf\x52\x40\xb9\xed\x3e\x7f\x5d\x7c\xb9\xbb\x17\xf0\xcb\xdd\xfd\xb2\x5c\x3e\x14\xff\x06\x00\x00\xff\xff\xf6\xcc\xa3\xdd\x91\x0a\x00\x00")

func migrations1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initUpSql,
		"migrations/1_init.up.sql",
	)
}

func migrations1_initUpSql() (*asset, error) {
	bytes, err := migrations1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.up.sql", size: 2705, mode: os.FileMode(436), modTime: time.Unix(1573594322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xb1\x8e\xdb\x3c\x0c\xde\xf5\x14\x44\x96\xb3\x7e\xe8\x0f\xe2\x35\xc0\xb5\x28\x7a\xcb\x4d\x5d\xbb\xea\x24\xfa\xa2\xc6\x96\x0c\x91\x69\xae\x40\x86\x3e\x4d\x1f\xac\x4f\x52\x88\xb2\x1d\xa7\x97\x7a\x30\x25\xf2\xa3\x48\x7e\xfa\x74\x0e\x7c\x50\x83\x65\x77\x40\x02\x4b\xd0\x28\x00\x00\xc2\x1e\x1d\xcb\xb2\x7c\x39\x9d\x83\x37\xcb\xb6\x0b\x99\x58\x72\x9a\x8e\xc9\xc0\x4e\x97\x4c\x71\x7c\x4e\xfd\x69\x88\xff\x86\xb6\x57\xe8\x97\xae\x23\xe4\x2b\x34\xdb\x78\x2c\xc1\x2c\x9e\x2e\xa7\xe1\x7a\x0a\x93\xac\xcf\x07\xcc\xb8\xf6\xd6\x93\x60\x2f\x46\x02\x7d\x18\x02\xc3\xde\xd9\x51\x69\xa3\x88\x2d\xbf\x1b\x0b\x5c\x3a\x45\x6e\xfe\x93\x56\x5c\x64\xa9\x05\x13\x07\x4a\x2b\xb5\x9a\x9e\x46\xeb\xd0\x40\x96\xc6\x6c\x3c\x1a\x49\xb0\x04\x9c\xd8\xf6\x06\xbe\xa5\x10\xd1\x6f\x7d\x72\xcf\x4f\xc5\x3d\xd3\x44\xa7\x17\xe2\xdc\x6c\x7e\xff\xfc\xb5\x31\xd0\x1a\x68\x56\x33\xc3\x07\x68\xb5\x86\xcb\x45\xa0\x19\xc7\xde\x3a\x6c\x96\xb9\x5e\x91\x39\x1d\x31\x92\x50\xb6\xb8\xcb\xe7\x2c\xe1\x9a\xe8\x9b\xe0\xc4\x50\x84\x1d\x70\x31\x3e\x39\xda\x72\xe0\x1e\xef\xc3\xda\x35\xec\x8d\x6f\x40\x18\xfd\x6d\xe5\xc1\xbe\xad\x47\xf8\xbf\x2d\xd7\x6e\xa0\xdd\xe9\x2b\xee\xeb\xc3\xee\xd3\x83\x81\x0d\x6c\xc4\xa5\xe5\x7f\xb9\x80\xb0\x50\xd8\xa1\x18\xc6\x11\x59\x09\xe1\x77\x95\x36\xf1\xbd\xd6\xd2\x8d\x5a\x20\x1b\x90\x4b\xdd\xba\xc8\xa6\xf6\x2e\xe4\x4f\xeb\xe0\xdf\xab\x67\xbe\xd9\x79\xdf\x63\xc7\x72\x71\x92\x02\x29\xce\xa9\xf0\x38\x63\xb7\xa2\xf8\x25\xc3\xe5\x44\x54\x53\xa4\xf8\x12\xa8\xae\xd2\x33\xc1\x89\x42\x7c\x6d\x64\xf3\xfc\xa4\xef\xe8\x55\x42\x10\x22\x34\x1f\xf5\xe2\xb4\xd1\xd7\xf2\xb6\x0f\xdf\x2b\x36\x65\x8f\x19\x5e\x7e\x88\xea\xdc\x5a\xd5\x62\x2a\xa6\x0a\x69\x5f\xad\xd2\x93\x10\xd5\x5f\xb3\xd5\x9e\x82\xd7\xab\x40\x79\x36\x49\x4c\x9d\x12\x1e\xa1\x99\x1e\x46\xf0\xf5\x2d\x48\x6e\xad\xd9\x6a\xf5\x27\x00\x00\xff\xff\xc8\xa9\x9d\xe4\x23\x04\x00\x00")

func queriesSearch_1SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_1Sql,
		"queries/search_1.sql",
	)
}

func queriesSearch_1Sql() (*asset, error) {
	bytes, err := queriesSearch_1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_1.sql", size: 1059, mode: os.FileMode(436), modTime: time.Unix(1573593584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xbd\x8e\xdb\x30\x0c\xde\xf5\x14\x44\x96\x93\x0a\x35\x88\xd7\x2b\xae\x45\xd1\x5b\x6e\xea\xda\x55\x27\xd1\x17\x35\xb6\x64\x88\x4c\x73\x05\x32\xf4\x69\xfa\x60\x7d\x92\x42\x94\x13\x3b\xfd\xf1\x60\x4a\xe4\x47\x8a\xfc\xf8\x9d\x22\xef\xd5\xe8\xd8\xef\x91\xc0\x11\x68\x05\x00\x40\x38\xa0\x67\x39\xd6\xaf\xe4\x53\x0c\xf6\x7a\xed\x63\x21\x96\x1c\xdd\x33\x59\xd8\x99\x9a\x29\x8e\x4f\x79\x38\x8e\xe9\xff\xd0\x6e\x81\x7e\xee\x7b\x42\x5e\xa0\xc5\xa5\x43\x0d\x16\xf1\xf4\x25\x8f\x4b\x15\x26\x39\x9f\xf6\x58\x70\xed\x6d\x95\xe0\x5e\x8c\x04\x86\x38\x46\x86\x7b\xef\x26\x65\xac\x22\x76\xfc\xd7\x58\xe0\xf3\x31\xb1\x7e\x23\xad\xf8\xc4\xf2\x16\xcc\x1c\x28\xa3\x56\xc3\xd3\xe4\x3c\xd2\x56\x8c\x85\x90\x3d\x6d\x43\xf6\x4f\x8f\x35\x33\x06\x7b\x49\xda\x16\x69\xdc\xa5\x83\x05\x79\x72\x5b\xcb\x3a\x02\xce\xec\x86\x36\x22\x1d\x9f\x89\x8b\xde\xfc\xfa\xf1\x73\x63\xa1\xb3\xa0\x57\x2c\xc0\x7b\xe8\x8c\x81\xf3\x59\xa0\x05\xa7\xc1\x79\xd4\xd7\x49\x5f\x90\x39\x1f\x30\x91\x90\x78\x75\xd7\xcf\x3b\xc2\x35\xf5\x37\xc1\x99\xb3\x04\x3b\xe0\x6a\x64\x00\x8e\x3c\xe0\xbf\x61\xdd\x1a\xf6\xca\x37\x20\x4c\xe1\xf6\xe5\xd1\xbd\xae\x47\x78\xdb\x55\x21\x58\xe8\x76\x66\xc1\x7d\xb9\xdb\x7d\xbc\xb3\xb0\x81\x8d\xb8\x8c\xfc\xcf\x67\x10\x16\x2a\x41\x94\xe2\x34\x21\xab\xeb\xba\x2f\x6b\xa8\xe7\xaf\x39\xb6\x66\x20\xcf\x4d\xc5\x00\x0f\x0b\xe9\x55\x95\x6d\xe9\xd8\x73\x43\x57\x4d\x64\x31\x2d\x0c\x0f\xa0\xe7\xad\xc7\xd0\x16\x2d\x05\x9b\x4c\x3a\xf3\x47\x7a\xdb\x37\x1c\x29\xa6\x17\xd0\x72\x7b\x7a\x6c\x20\x5f\x32\xd1\x8c\xaa\x2b\x56\x8b\x18\xa5\x35\x37\xc4\x6f\xed\xea\x52\x68\x85\x20\x26\xd0\x1f\x8c\xca\x25\x60\x81\xe7\xef\x37\x72\xf1\x17\xa9\x36\x93\x9b\x0e\xee\x9b\x7d\xa7\x7e\x07\x00\x00\xff\xff\x6e\xa2\x0b\x36\x98\x03\x00\x00")

func queriesSearch_2SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_2Sql,
		"queries/search_2.sql",
	)
}

func queriesSearch_2Sql() (*asset, error) {
	bytes, err := queriesSearch_2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_2.sql", size: 920, mode: os.FileMode(436), modTime: time.Unix(1573593584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_init.down.sql": migrations1_initDownSql,
	"migrations/1_init.up.sql":   migrations1_initUpSql,
	"queries/search_1.sql":       queriesSearch_1Sql,
	"queries/search_2.sql":       queriesSearch_2Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_init.down.sql": &bintree{migrations1_initDownSql, map[string]*bintree{}},
		"1_init.up.sql":   &bintree{migrations1_initUpSql, map[string]*bintree{}},
	}},
	"queries": &bintree{nil, map[string]*bintree{
		"search_1.sql": &bintree{queriesSearch_1Sql, map[string]*bintree{}},
		"search_2.sql": &bintree{queriesSearch_2Sql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
