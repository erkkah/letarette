// Code generated for package letarette by go-bindata DO NOT EDIT. (@generated)
// sources:
// migrations/0_init.down.sql
// migrations/0_init.up.sql
// queries/search_1.sql
// queries/search_2.sql
package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xca\xc1\x09\xc0\x20\x10\x04\xc0\xff\x55\x61\x1f\x56\x73\xd1\x0d\x04\x72\x51\x6e\xb7\x7f\xf2\x55\xbf\xc3\xf4\x1c\xb3\xc8\xaf\x17\x25\x20\xaf\x66\x8b\x70\x7a\x03\x77\x7b\x3e\x21\x41\xed\xda\x47\x3b\xde\xad\x03\x28\x44\x20\x29\x17\xaa\xfd\x01\x00\x00\xff\xff\xba\x85\x82\xe2\x78\x00\x00\x00")

func migrations0_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0_initDownSql,
		"migrations/0_init.down.sql",
	)
}

func migrations0_initDownSql() (*asset, error) {
	bytes, err := migrations0_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0_init.down.sql", size: 120, mode: os.FileMode(436), modTime: time.Unix(1573592191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations0_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x3d\x73\xdb\x30\x0c\xdd\xf5\x2b\x70\x59\x64\xdf\x31\xbd\x5e\x3f\xa6\xd4\x43\x2f\x5e\xb2\x74\xeb\x9c\xa3\x45\x48\xc1\x85\x22\x55\x12\x72\x9c\xfe\xfa\x1e\x3f\x22\x7f\x88\x89\xe3\x21\x9d\x44\xfb\x81\xe0\x7b\x0f\x00\xd9\x38\x94\x8c\xc0\x72\xa3\x11\xa8\x05\x63\x19\x70\x47\x9e\x3d\xf4\xc8\x12\x16\x15\x00\x00\x19\x85\xbb\xbb\x35\x30\xee\x38\x86\x98\x51\x6b\x11\xa1\x94\x40\x01\x53\x8f\x9e\x65\x3f\x80\xc2\x56\x8e\x9a\xa1\x19\x9d\x43\xc3\xf7\x13\x52\x2d\x6f\xaa\xea\x8d\x03\xfd\x20\x1b\xf4\xe9\xc4\xb8\xbe\x5b\x03\x19\xc6\x0e\x1d\x0c\x8e\x7a\xe9\x9e\xe1\x11\x9f\xc5\x3e\xe0\x98\x10\x8c\x86\xfe\x8c\x28\xaa\x18\x70\x7d\x9d\x68\xc3\x60\x3d\x31\x59\xb3\xa7\x18\x71\x2d\x3d\xff\x1e\x54\x20\xff\x93\x7f\x49\x63\xfd\x74\xd8\xb1\xc2\x79\x22\x65\x9b\xb1\x47\xc3\x77\xeb\xd3\x4c\x6b\xdb\x9c\xda\x34\xf9\x71\x75\x75\x90\x8f\xd1\xa1\x67\xd0\xe4\x39\x59\x58\x20\x48\x9e\x6f\x93\xbb\xaf\x11\x9c\x72\x7f\xce\xa2\x9b\x07\x6c\x1e\x93\x83\xaf\x68\xfc\xb1\x2a\x24\x8e\x1b\x96\xe7\xea\xf3\xc2\xba\x5c\xa1\x63\xd3\xd4\xdc\x88\x5c\x37\x0e\xe9\x67\x9b\x60\x4c\x34\xcf\xeb\x0c\x49\x52\xa1\x17\x99\x82\x48\xa7\x2d\x23\xd4\x5a\x87\xd4\x99\xd0\x28\xf0\x12\xb0\x04\x87\x2d\x3a\x34\x0d\x4e\x5d\xf6\x02\x9d\x13\xad\x6c\x93\x5b\x92\xd4\x99\x6e\xbc\xdc\x8c\x37\x45\xa7\x10\x26\xd6\x58\xda\xcb\x3b\x2e\xfd\x2d\x35\x6d\x11\x36\xd6\x6a\x94\x66\x6e\x20\xbb\x30\x20\x1f\xe8\x61\x1a\x95\xb9\x87\xf7\x31\x38\xa2\x55\x1a\xa1\xfd\xfe\x83\x0a\x38\xea\x82\x07\x85\xfd\x92\x40\xb6\x1c\x30\xe3\xd1\x31\xe4\x24\xb0\xc1\x8e\x4c\xbe\xa5\x22\x40\x86\x2d\xb4\xec\x17\xce\x3e\x91\x12\xc9\x41\x11\xfc\x5a\xc2\x56\xea\x11\x3d\x2c\x0c\x3e\x7d\x0a\x58\xf8\x66\x3c\x2e\x77\xbc\xbc\xa9\xd0\xa8\xf7\x31\x52\x99\x91\x42\x8d\x8c\xef\x60\xd4\xb2\x17\xf0\x06\xad\x3a\x65\xaa\x05\x58\xad\x22\xc1\xf0\xcd\x91\x71\x79\x19\xc1\x31\x13\x4c\x7d\xf6\xff\x08\x7e\x5c\x35\x4a\xcf\x06\x63\xdf\xa3\x4b\x17\xcb\x22\xdf\xc8\xa6\x1b\x65\x87\xbe\x34\x21\x0e\x7b\xbb\xc5\x35\xc9\xc6\x11\x53\xb0\xe3\x64\x58\xf2\x7c\xd9\x47\x34\xb7\x0f\xd2\xc9\x86\xd1\x15\x33\x79\x1c\xa4\x93\x6c\xcb\x68\x1e\xee\x8b\x5f\xc6\x62\x3d\x0f\x45\x9e\xd6\xb5\xb2\xed\x5e\xb1\x98\xe9\x13\xa7\x52\xc4\x01\xf1\x30\x8b\x47\x06\xee\x7b\x23\x37\xcd\x11\xea\x91\x27\x5d\xab\xb9\x8e\x93\x6a\x6d\xc9\xf1\x28\x75\xb1\x6a\x2d\x7b\x18\x3d\x99\x2e\xac\xbe\x2f\xf6\x77\x5d\xec\x0d\x01\x8d\x35\x8c\x86\x57\x75\xe8\xd8\x7a\xfa\x7d\x1f\xdb\x68\x55\x93\xaa\x0f\xca\x44\x7f\x71\x55\x7b\x63\x9f\x36\x52\xeb\x5a\xc0\xe0\xb0\xa5\xdd\xaa\xfe\x02\x5f\xe1\x5b\x1d\xdc\xfd\x17\x00\x00\xff\xff\xf5\x90\x98\x32\xe8\x08\x00\x00")

func migrations0_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0_initUpSql,
		"migrations/0_init.up.sql",
	)
}

func migrations0_initUpSql() (*asset, error) {
	bytes, err := migrations0_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0_init.up.sql", size: 2280, mode: os.FileMode(436), modTime: time.Unix(1573592111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xb1\x8e\xdb\x3c\x0c\xde\xf5\x14\x44\x96\xb3\x7e\xe8\x0f\xe2\x35\xc0\xb5\x28\x7a\xcb\x4d\x5d\xbb\xea\x24\xfa\xa2\xc6\x96\x0c\x91\x69\xae\x40\x86\x3e\x4d\x1f\xac\x4f\x52\x88\xb2\x1d\xa7\x97\x7a\x30\x25\xf2\xa3\x48\x7e\xfa\x74\x0e\x7c\x50\x83\x65\x77\x40\x02\x4b\xd0\x28\x00\x00\xc2\x1e\x1d\xcb\xb2\x7c\x39\x9d\x83\x37\xcb\xb6\x0b\x99\x58\x72\x9a\x8e\xc9\xc0\x4e\x97\x4c\x71\x7c\x4e\xfd\x69\x88\xff\x86\xb6\x57\xe8\x97\xae\x23\xe4\x2b\x34\xdb\x78\x2c\xc1\x2c\x9e\x2e\xa7\xe1\x7a\x0a\x93\xac\xcf\x07\xcc\xb8\xf6\xd6\x93\x60\x2f\x46\x02\x7d\x18\x02\xc3\xde\xd9\x51\x69\xa3\x88\x2d\xbf\x1b\x0b\x5c\x3a\x45\x6e\xfe\x93\x56\x5c\x64\xa9\x05\x13\x07\x4a\x2b\xb5\x9a\x9e\x46\xeb\xd0\x40\x96\xc6\x6c\x3c\x1a\x49\xb0\x04\x9c\xd8\xf6\x06\xbe\xa5\x10\xd1\x6f\x7d\x72\xcf\x4f\xc5\x3d\xd3\x44\xa7\x17\xe2\xdc\x6c\x7e\xff\xfc\xb5\x31\xd0\x1a\x68\x56\x33\xc3\x07\x68\xb5\x86\xcb\x45\xa0\x19\xc7\xde\x3a\x6c\x96\xb9\x5e\x91\x39\x1d\x31\x92\x50\xb6\xb8\xcb\xe7\x2c\xe1\x9a\xe8\x9b\xe0\xc4\x50\x84\x1d\x70\x31\x3e\x39\xda\x72\xe0\x1e\xef\xc3\xda\x35\xec\x8d\x6f\x40\x18\xfd\x6d\xe5\xc1\xbe\xad\x47\xf8\xbf\x2d\xd7\x6e\xa0\xdd\xe9\x2b\xee\xeb\xc3\xee\xd3\x83\x81\x0d\x6c\xc4\xa5\xe5\x7f\xb9\x80\xb0\x50\xd8\xa1\x18\xc6\x11\x59\x09\xe1\x77\x95\x36\xf1\xbd\xd6\xd2\x8d\x5a\x20\x1b\x90\x4b\xdd\xba\xc8\xa6\xf6\x2e\xe4\x4f\xeb\xe0\xdf\xab\x67\xbe\xd9\x79\xdf\x63\xc7\x72\x71\x92\x02\x29\xce\xa9\xf0\x38\x63\xb7\xa2\xf8\x25\xc3\xe5\x44\x54\x53\xa4\xf8\x12\xa8\xae\xd2\x33\xc1\x89\x42\x7c\x6d\x64\xf3\xfc\xa4\xef\xe8\x55\x42\x10\x22\x34\x1f\xf5\xe2\xb4\xd1\xd7\xf2\xb6\x0f\xdf\x2b\x36\x65\x8f\x19\x5e\x7e\x88\xea\xdc\x5a\xd5\x62\x2a\xa6\x0a\x69\x5f\xad\xd2\x93\x10\xd5\x5f\xb3\xd5\x9e\x82\xd7\xab\x40\x79\x36\x49\x4c\x9d\x12\x1e\xa1\x99\x1e\x46\xf0\xf5\x2d\x48\x6e\xad\xd9\x6a\xf5\x27\x00\x00\xff\xff\xc8\xa9\x9d\xe4\x23\x04\x00\x00")

func queriesSearch_1SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_1Sql,
		"queries/search_1.sql",
	)
}

func queriesSearch_1Sql() (*asset, error) {
	bytes, err := queriesSearch_1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_1.sql", size: 1059, mode: os.FileMode(436), modTime: time.Unix(1573589721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xbd\x8e\xdb\x30\x0c\xde\xf5\x14\x44\x96\x93\x0a\x35\x88\xd7\x2b\xae\x45\xd1\x5b\x6e\xea\xda\x55\x27\xd1\x17\x35\xb6\x64\x88\x4c\x73\x05\x32\xf4\x69\xfa\x60\x7d\x92\x42\x94\x13\x3b\xfd\xf1\x60\x4a\xe4\x47\x8a\xfc\xf8\x9d\x22\xef\xd5\xe8\xd8\xef\x91\xc0\x11\x68\x05\x00\x40\x38\xa0\x67\x39\xd6\xaf\xe4\x53\x0c\xf6\x7a\xed\x63\x21\x96\x1c\xdd\x33\x59\xd8\x99\x9a\x29\x8e\x4f\x79\x38\x8e\xe9\xff\xd0\x6e\x81\x7e\xee\x7b\x42\x5e\xa0\xc5\xa5\x43\x0d\x16\xf1\xf4\x25\x8f\x4b\x15\x26\x39\x9f\xf6\x58\x70\xed\x6d\x95\xe0\x5e\x8c\x04\x86\x38\x46\x86\x7b\xef\x26\x65\xac\x22\x76\xfc\xd7\x58\xe0\xf3\x31\xb1\x7e\x23\xad\xf8\xc4\xf2\x16\xcc\x1c\x28\xa3\x56\xc3\xd3\xe4\x3c\xd2\x56\x8c\x85\x90\x3d\x6d\x43\xf6\x4f\x8f\x35\x33\x06\x7b\x49\xda\x16\x69\xdc\xa5\x83\x05\x79\x72\x5b\xcb\x3a\x02\xce\xec\x86\x36\x22\x1d\x9f\x89\x8b\xde\xfc\xfa\xf1\x73\x63\xa1\xb3\xa0\x57\x2c\xc0\x7b\xe8\x8c\x81\xf3\x59\xa0\x05\xa7\xc1\x79\xd4\xd7\x49\x5f\x90\x39\x1f\x30\x91\x90\x78\x75\xd7\xcf\x3b\xc2\x35\xf5\x37\xc1\x99\xb3\x04\x3b\xe0\x6a\x64\x00\x8e\x3c\xe0\xbf\x61\xdd\x1a\xf6\xca\x37\x20\x4c\xe1\xf6\xe5\xd1\xbd\xae\x47\x78\xdb\x55\x21\x58\xe8\x76\x66\xc1\x7d\xb9\xdb\x7d\xbc\xb3\xb0\x81\x8d\xb8\x8c\xfc\xcf\x67\x10\x16\x2a\x41\x94\xe2\x34\x21\xab\xeb\xba\x2f\x6b\xa8\xe7\xaf\x39\xb6\x66\x20\xcf\x4d\xc5\x00\x0f\x0b\xe9\x55\x95\x6d\xe9\xd8\x73\x43\x57\x4d\x64\x31\x2d\x0c\x0f\xa0\xe7\xad\xc7\xd0\x16\x2d\x05\x9b\x4c\x3a\xf3\x47\x7a\xdb\x37\x1c\x29\xa6\x17\xd0\x72\x7b\x7a\x6c\x20\x5f\x32\xd1\x8c\xaa\x2b\x56\x8b\x18\xa5\x35\x37\xc4\x6f\xed\xea\x52\x68\x85\x20\x26\xd0\x1f\x8c\xca\x25\x60\x81\xe7\xef\x37\x72\xf1\x17\xa9\x36\x93\x9b\x0e\xee\x9b\x7d\xa7\x7e\x07\x00\x00\xff\xff\x6e\xa2\x0b\x36\x98\x03\x00\x00")

func queriesSearch_2SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_2Sql,
		"queries/search_2.sql",
	)
}

func queriesSearch_2Sql() (*asset, error) {
	bytes, err := queriesSearch_2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_2.sql", size: 920, mode: os.FileMode(436), modTime: time.Unix(1573589944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0_init.down.sql": migrations0_initDownSql,
	"migrations/0_init.up.sql":   migrations0_initUpSql,
	"queries/search_1.sql":       queriesSearch_1Sql,
	"queries/search_2.sql":       queriesSearch_2Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"0_init.down.sql": &bintree{migrations0_initDownSql, map[string]*bintree{}},
		"0_init.up.sql":   &bintree{migrations0_initUpSql, map[string]*bintree{}},
	}},
	"queries": &bintree{nil, map[string]*bintree{
		"search_1.sql": &bintree{queriesSearch_1Sql, map[string]*bintree{}},
		"search_2.sql": &bintree{queriesSearch_2Sql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
