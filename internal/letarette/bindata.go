// Code generated for package letarette by go-bindata DO NOT EDIT. (@generated)
// sources:
// migrations/1_init.down.sql
// migrations/1_init.up.sql
// migrations/2_alive.down.sql
// migrations/2_alive.up.sql
// migrations/3_snowball.down.sql
// migrations/3_snowball.up.sql
// migrations/4_stemmerstate.down.sql
// migrations/4_stemmerstate.up.sql
// migrations/5_spaceindex.down.sql
// migrations/5_spaceindex.up.sql
// migrations/6_prefixindex.down.sql
// migrations/6_prefixindex.up.sql
// migrations/7_interesttime.down.sql
// migrations/7_interesttime.up.sql
// migrations/8_indexid.down.sql
// migrations/8_indexid.up.sql
// migrations/9_titles.down.sql
// migrations/9_titles.up.sql
// queries/search_1.sql
// queries/search_2.sql
package letarette

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x2e\x48\x4c\x4e\x2d\xb6\xe6\xe2\x42\x12\xcb\xcc\x2b\x49\x2d\x4a\x2d\x2e\x41\x15\x4d\xc9\x4f\x46\x53\x97\x56\x52\x6c\xcd\x05\x08\x00\x00\xff\xff\x40\xc9\x79\xc7\x4c\x00\x00\x00")

func migrations1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initDownSql,
		"migrations/1_init.down.sql",
	)
}

func migrations1_initDownSql() (*asset, error) {
	bytes, err := migrations1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.down.sql", size: 76, mode: os.FileMode(436), modTime: time.Unix(1570371832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x31\x6f\xdb\x30\x10\x85\x77\xfd\x8a\x83\x3b\xc8\x02\x94\xa2\x1d\xda\x25\xf5\x50\xd4\x8b\x97\x6e\x9d\x03\x86\x3c\x29\x07\xd3\x47\x95\x3c\x26\x4a\x7f\x7d\x41\x52\x72\x9b\x44\x76\x12\xa0\xcd\x44\x1a\x77\x7c\xfe\xee\xbd\x93\xf6\xa8\x04\x41\xd4\xb5\x45\xa0\x0e\xd8\x09\xe0\x48\x41\x02\x84\x41\x69\x0c\xeb\x0a\x00\xca\x7d\xb7\x05\x62\xc1\x1e\x3d\x0c\x9e\x0e\xca\xdf\xc3\x1e\xef\xdb\x3f\x0d\x20\x38\x4a\x96\xe0\x68\x2d\x44\xa6\x9f\x11\xdb\x2a\x37\x5c\x5c\x00\xb1\xc1\x11\x06\x17\x48\xc8\x31\x08\x1d\x30\x88\x3a\x0c\xb9\x6e\x55\x90\x1f\x83\x51\x82\xe6\xab\x7c\x57\xec\xc2\xf1\xcf\x66\xc1\xf6\x84\x90\x71\x3a\x1e\x90\x65\xb7\x7d\xac\xb4\x75\x7a\xb7\x7d\x44\x65\xb0\x53\xd1\x0a\xac\x56\x7f\x93\x09\x7a\x0c\x02\x96\x82\x40\xf6\x64\x81\x90\x82\x7c\xcb\x76\x9d\x24\x3c\x8a\x7f\x98\xb4\xf5\x0d\xea\x7d\xb1\xf0\xc4\x90\x5f\x36\x0b\xc2\xf9\x41\x53\x35\x97\x55\x75\x26\xa0\x99\x7a\x39\xa2\x87\xae\x99\xa7\x4e\x4c\xc1\x49\x92\x5f\x7e\x54\x02\x5c\x4f\xca\x6d\x11\x69\x72\xa9\x73\x1e\xa9\xe7\xb4\x00\x30\x37\x34\xe0\xb1\x43\x8f\xac\xf1\xb8\x3d\x73\xe9\xb9\x59\x8c\xd3\xd3\xaa\x91\x79\x66\xcb\x5e\x3f\x63\x2c\x96\x9f\xdb\x2a\x19\x65\xf1\xe5\xff\x71\xe0\x96\xbc\x44\x65\x17\x9d\xe8\x24\x40\x0c\xc4\x7d\xba\x7d\x5a\xcf\x74\x2d\x68\xc7\x82\x2c\x9b\x3a\x79\x55\x1f\x7f\x5f\x79\x77\x47\x66\x53\x93\xa9\xa7\x51\xdc\x1e\x99\x7e\xe1\x66\x35\x38\x2f\xe8\xd3\x10\xda\x19\xfc\xfc\xb1\x94\xf4\x8d\xf2\x01\xea\x77\xf5\xea\x41\x28\x9e\xfa\x64\xcb\xd3\x58\xae\x14\x81\xea\x92\x10\x71\x40\x2f\x50\x3e\xb9\x00\xd7\xd8\x13\x97\xcc\x4a\x81\x58\x5c\xa2\x5e\x67\xa4\x16\x84\xc4\x62\x9b\xe8\x1b\xb8\x55\x36\x62\x80\x35\xe3\xdd\xfb\x54\x4b\xe7\x54\xcf\xd7\x51\x9a\xcb\x0a\xd9\xbc\x8c\xc8\x4c\x44\x06\x2d\x0a\xbe\x80\xa8\x93\xd0\xc2\x19\xac\xba\x28\xd5\x2d\x38\x6b\x32\x60\x3a\xa7\xce\x7c\x7d\x1d\x60\x9c\x00\xcb\xea\xbd\x1d\xe0\x3f\x4f\xe3\x77\x00\x00\x00\xff\xff\xe5\x17\xe5\x06\x21\x06\x00\x00")

func migrations1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initUpSql,
		"migrations/1_init.up.sql",
	)
}

func migrations1_initUpSql() (*asset, error) {
	bytes, err := migrations1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_init.up.sql", size: 1569, mode: os.FileMode(436), modTime: time.Unix(1573587942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_aliveDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x20\x0c\x06\xe0\xf7\x4e\xf1\x23\xc8\x0a\xa2\x0b\x74\x98\x58\xfa\x0b\xc2\x74\xa0\xab\x5e\x3c\x7c\x9f\x5a\x70\x21\xf4\x6d\x44\xf5\xb2\xb1\x38\x75\x10\xc5\xed\x33\x26\xd4\xfa\x97\x08\x47\xaa\x34\x06\xeb\x2b\xe1\x1c\xec\x58\x2d\xfa\xe0\x55\xf2\x7e\xe4\x26\x77\x99\xfe\x93\xdb\xf3\xf2\x0f\x00\x00\xff\xff\xcf\xb9\xfa\x8c\x4f\x00\x00\x00")

func migrations2_aliveDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_aliveDownSql,
		"migrations/2_alive.down.sql",
	)
}

func migrations2_aliveDownSql() (*asset, error) {
	bytes, err := migrations2_aliveDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_alive.down.sql", size: 79, mode: os.FileMode(436), modTime: time.Unix(1570372608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_aliveUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc3\x40\x0c\x03\xd0\xff\x4e\xa1\x3d\x3a\x8d\xee\xac\x42\x41\xb1\xe1\x62\x67\xfe\x3c\xba\x75\xd0\x5c\x16\xa2\xf6\x0d\x46\x60\x97\xe7\x4a\xd0\xff\x47\x58\x55\x16\x13\x59\x8d\x1c\x1b\xa1\x1f\xc7\x8d\x3e\xa3\xef\xe7\x0d\x00\x00\xff\xff\x4e\xaf\xf6\xd8\x41\x00\x00\x00")

func migrations2_aliveUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_aliveUpSql,
		"migrations/2_alive.up.sql",
	)
}

func migrations2_aliveUpSql() (*asset, error) {
	bytes, err := migrations2_aliveUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_alive.up.sql", size: 65, mode: os.FileMode(436), modTime: time.Unix(1570371967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_snowballDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\xc1\x4a\xc5\x40\x0c\x45\xf7\xf3\x15\xe1\xb9\x48\x0b\xdd\xb8\xd0\x4d\xe9\xb7\xc8\x74\x26\xd5\xe0\x90\x94\x24\x53\x8b\x5f\x2f\xa5\xf2\x76\xf7\x72\x0e\x9c\x6a\xba\x43\xe4\xb5\x11\x6c\xe1\x73\x4a\xc5\x28\x07\xc1\xc1\x16\x3d\xb7\x7f\xc4\x1b\x88\x06\xd0\xc9\x1e\x7e\x89\xd0\x9d\xe5\xf3\x5a\x6f\x43\x02\x00\x88\x33\x26\x28\x2a\x41\x12\x0b\x56\x2d\x8e\xcf\xff\x61\xfa\xc3\x75\x41\xae\x38\xdd\xb2\x7e\x93\xf0\x2f\x2d\x8f\x5d\x2d\xc8\xa0\x0b\x17\xad\xf4\xfe\x7a\xa3\xf2\x95\xcd\x01\x5f\xf0\x91\xc6\x39\x25\x16\x27\x0b\x60\x09\xbd\x8a\xc3\x16\x3e\xc2\x91\x5b\x27\x1f\xd0\x68\xed\xdc\x2a\x8e\x73\xfa\x0b\x00\x00\xff\xff\xfe\x51\x31\xfe\xcc\x00\x00\x00")

func migrations3_snowballDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_snowballDownSql,
		"migrations/3_snowball.down.sql",
	)
}

func migrations3_snowballDownSql() (*asset, error) {
	bytes, err := migrations3_snowballDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_snowball.down.sql", size: 204, mode: os.FileMode(436), modTime: time.Unix(1571435094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_snowballUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xc1\x0a\x83\x30\x10\x04\xd0\x7b\xbe\x62\xf1\x12\x05\xaf\x3d\x89\xdf\x52\xa2\x59\xcb\xd2\xb0\x5b\xb2\x13\x95\x7e\x7d\x91\x96\xde\x66\x98\xc7\xe4\x6a\x2f\x42\x5a\x0a\xd3\x06\x9f\x42\x58\x2b\x27\x30\xed\x52\xd1\x52\xf9\x4d\xb2\x91\x1a\x88\x4f\x71\xf8\x05\xa9\xb9\xe8\xe3\x4a\xb7\x3e\x10\x11\xe1\xc4\x48\xab\x29\x58\x31\xc7\x6c\xab\xc7\x7f\xbf\x57\x3b\x24\xcf\x51\x72\x1c\xbf\xd8\x9e\xac\xf2\xe6\xb9\x73\xb5\x63\x49\xa5\x74\x61\x98\x42\x10\x75\xae\x20\x51\xd8\x75\xdd\x6f\xf0\x81\xf6\x54\x1a\x7b\x1f\x2b\x2f\x4d\x4a\x8e\xc3\x14\x3e\x01\x00\x00\xff\xff\x18\x75\x72\x51\xb5\x00\x00\x00")

func migrations3_snowballUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_snowballUpSql,
		"migrations/3_snowball.up.sql",
	)
}

func migrations3_snowballUpSql() (*asset, error) {
	bytes, err := migrations3_snowballUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_snowball.up.sql", size: 181, mode: os.FileMode(436), modTime: time.Unix(1571435094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_stemmerstateDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\x28\x2e\x49\xcd\xcd\x4d\x2d\x2a\x2e\x49\x2c\x49\xb5\xe6\x02\x04\x00\x00\xff\xff\x40\x10\xb9\x1c\x19\x00\x00\x00")

func migrations4_stemmerstateDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_stemmerstateDownSql,
		"migrations/4_stemmerstate.down.sql",
	)
}

func migrations4_stemmerstateDownSql() (*asset, error) {
	bytes, err := migrations4_stemmerstateDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_stemmerstate.down.sql", size: 25, mode: os.FileMode(436), modTime: time.Unix(1571435094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_stemmerstateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x4b\x4e\xc4\x30\x10\x04\xd0\xbd\x4f\xd1\x4b\x90\x72\x83\x88\x15\xdc\x63\xd4\x71\x2a\xc6\xc2\x9f\xa8\xbb\x8c\xe6\xf8\x88\x11\x0c\xf3\x13\xeb\x2a\xd9\xf5\x3a\x1a\x94\x10\xea\x52\x20\x79\x93\xd6\x29\x38\x66\xa7\x8b\x13\xb5\xc2\x9c\xdf\x85\xa7\x20\x22\x52\xb4\xa5\xa1\x09\x2e\xc4\x91\xa7\x72\x1b\xa5\x4c\xa7\xd0\x50\xfb\x27\xde\xb2\x46\xcb\xcc\xd1\x65\xe9\xbd\x40\xdb\x4d\x8d\xfd\x03\xed\xf5\x5d\x4d\x23\x61\x0f\x5f\x72\xec\x6a\xca\xfe\x38\x1d\xfb\xaa\xc4\x2a\xcc\x15\x4e\xad\xbb\xac\xd8\x74\x14\x4a\x1c\x66\x68\x3c\x9c\x93\xf0\x3c\x87\xf0\x4b\xb4\x9c\x12\xec\x1f\xe4\x41\x87\xe8\x46\xd8\xcf\x17\xa1\x6f\x7f\xe2\xe9\xce\x37\xdd\x52\xa6\x8b\xe1\xa1\xb7\xeb\x03\x2e\x48\xb9\x5d\xec\xbf\x4e\x1d\x3c\xbb\x5e\xee\x1d\x73\x40\x5b\xe7\xf0\x15\x00\x00\xff\xff\xf5\xd9\x27\x17\xad\x01\x00\x00")

func migrations4_stemmerstateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_stemmerstateUpSql,
		"migrations/4_stemmerstate.up.sql",
	)
}

func migrations4_stemmerstateUpSql() (*asset, error) {
	bytes, err := migrations4_stemmerstateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_stemmerstate.up.sql", size: 429, mode: os.FileMode(436), modTime: time.Unix(1573422571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_spaceindexDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\xc8\xcc\x4b\x49\xad\x50\x48\xc9\x4f\x2e\x8e\x2f\x2e\x48\x4c\x4e\x05\xf3\xad\xb9\x00\x01\x00\x00\xff\xff\xb4\x81\x4f\x9f\x1c\x00\x00\x00")

func migrations5_spaceindexDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_spaceindexDownSql,
		"migrations/5_spaceindex.down.sql",
	)
}

func migrations5_spaceindexDownSql() (*asset, error) {
	bytes, err := migrations5_spaceindexDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_spaceindex.down.sql", size: 28, mode: os.FileMode(436), modTime: time.Unix(1572301520, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_spaceindexUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2e\x4a\x4d\x2c\x49\x55\xc8\xcc\x4b\x49\xad\x50\xc8\x4c\x53\xc8\xcb\x2f\x51\x48\xad\xc8\x2c\x2e\x29\x56\x48\xc9\x4f\x2e\x8e\x2f\x2e\x48\x4c\x4e\x05\xcb\x72\xe5\xe7\x81\x85\x34\xc0\x42\x9e\x2e\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\xeb\xd3\x8d\x25\x3d\x00\x00\x00")

func migrations5_spaceindexUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_spaceindexUpSql,
		"migrations/5_spaceindex.up.sql",
	)
}

func migrations5_spaceindexUpSql() (*asset, error) {
	bytes, err := migrations5_spaceindexUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_spaceindex.up.sql", size: 61, mode: os.FileMode(436), modTime: time.Unix(1572301506, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_prefixindexDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xc1\x0a\x83\x40\x0c\x04\xd0\x7b\xbe\x22\xb7\x28\x78\xed\x49\xfc\x96\xb2\xba\xb1\x84\x2e\x49\xd9\x64\x55\xfa\xf5\x65\x69\xe9\x6d\x86\x79\x4c\xae\xf6\xc2\x48\x6b\x61\xdc\xc3\x67\x80\xad\x72\x0a\xc6\x43\x6a\xb4\x54\x7e\x93\xec\xa8\x16\xc8\x97\x78\x78\x87\xd8\x5c\xf4\xd1\xd3\x6d\x00\x44\xc4\xb8\x62\xc2\xcd\x34\x58\x63\xa1\x6c\x9b\xd3\xbf\xdf\xab\x9d\x92\x17\x92\x4c\xd3\x17\xdb\x93\x55\xde\xbc\x90\xab\x9d\x6b\x2a\x85\x60\x9c\x01\x44\x9d\x6b\xa0\x68\x58\xbf\x1e\xf6\xf0\x11\x8f\x54\x1a\xfb\x40\x95\xd7\x26\x25\xd3\x38\xc3\x27\x00\x00\xff\xff\xd6\xf9\xe1\xa0\xb5\x00\x00\x00")

func migrations6_prefixindexDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_prefixindexDownSql,
		"migrations/6_prefixindex.down.sql",
	)
}

func migrations6_prefixindexDownSql() (*asset, error) {
	bytes, err := migrations6_prefixindexDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_prefixindex.down.sql", size: 181, mode: os.FileMode(436), modTime: time.Unix(1572894572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_prefixindexUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x4d\x6a\xc5\x30\x0c\x04\xe0\xbd\x4f\x31\x3b\x25\x90\x55\x7f\x56\x21\x67\x29\x4e\x2c\x17\x51\x23\x3d\x2c\xf9\x25\xf4\xf4\x25\xb4\x74\x37\xc3\x7c\x30\xa5\xdb\x03\x91\xf7\xc6\xa8\xe1\x6b\x4a\x47\xe7\x1c\x8c\xa7\xf4\x18\xb9\xfd\x4d\x52\xa1\x16\xe0\x4b\x3c\xfc\x86\x18\x2e\xfa\x79\xa7\xf7\x29\x01\x40\x5c\xb1\xe0\x30\x0d\xd6\xd8\xa8\xd8\xe1\xf4\xdf\x3f\xba\x9d\x52\x36\x92\x42\xcb\x2f\xb6\x2f\x56\xf9\xe6\x8d\x5c\xed\xdc\x73\x6b\xb4\xe0\xd1\xb9\xca\xb5\xd1\x0b\x5e\xf1\x46\x69\x5e\x53\x12\x75\xee\x01\xd1\xb0\xfb\x6a\xaa\xe1\x33\x9e\xb9\x0d\xf6\x89\x3a\xef\x43\x5a\xa1\x79\x4d\x3f\x01\x00\x00\xff\xff\xbc\x67\xa2\xb3\xc5\x00\x00\x00")

func migrations6_prefixindexUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_prefixindexUpSql,
		"migrations/6_prefixindex.up.sql",
	)
}

func migrations6_prefixindexUpSql() (*asset, error) {
	bytes, err := migrations6_prefixindexUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_prefixindex.up.sql", size: 197, mode: os.FileMode(436), modTime: time.Unix(1572896163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_interesttimeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc6\x41\x0a\x02\x31\x0c\x05\xd0\xbd\xa7\xf8\x0c\x0c\x51\x10\x2f\xe0\x61\x24\x4e\x7e\x41\x48\x1b\x69\x53\xdc\xf4\xf0\x22\xb8\x7a\x4f\x3d\xd9\x91\xfa\x74\xc2\xe2\x18\xe8\x6c\x5a\x89\x23\x7c\xd6\x86\xf9\x36\x4d\x1a\x32\xb0\xfd\xff\x30\x3a\x7f\x6e\x58\x0b\x23\x7b\xc9\x57\xe5\x59\xf6\x71\xdb\x8b\x5c\xa5\xc5\x47\x2e\xf7\xd3\x37\x00\x00\xff\xff\xd4\x64\x17\x93\x59\x00\x00\x00")

func migrations7_interesttimeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_interesttimeDownSql,
		"migrations/7_interesttime.down.sql",
	)
}

func migrations7_interesttimeDownSql() (*asset, error) {
	bytes, err := migrations7_interesttimeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_interesttime.down.sql", size: 89, mode: os.FileMode(436), modTime: time.Unix(1573581203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_interesttimeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xc1\x0d\x84\x50\x08\x04\xd0\xfb\x56\x31\x25\xec\xdd\x1e\xec\x01\x65\x34\x26\xc8\x37\xfc\xa1\x7f\x13\xef\xcf\x42\x2c\xc8\xb6\x20\xae\x14\x8b\x53\x30\x77\xec\x23\xfa\x4e\xf4\xe3\x26\xfa\x6a\x39\xe6\x07\x4e\x16\x72\x08\xd9\x11\x70\x1e\xd6\x21\xfc\x97\xdf\x1b\x00\x00\xff\xff\x2f\x59\xb5\x3c\x49\x00\x00\x00")

func migrations7_interesttimeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_interesttimeUpSql,
		"migrations/7_interesttime.up.sql",
	)
}

func migrations7_interesttimeUpSql() (*asset, error) {
	bytes, err := migrations7_interesttimeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_interesttime.up.sql", size: 73, mode: os.FileMode(436), modTime: time.Unix(1573422571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_indexidDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4d\x2d\x49\xb4\xe6\x02\x04\x00\x00\xff\xff\x46\xdf\x11\xc4\x11\x00\x00\x00")

func migrations8_indexidDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_indexidDownSql,
		"migrations/8_indexid.down.sql",
	)
}

func migrations8_indexidDownSql() (*asset, error) {
	bytes, err := migrations8_indexidDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_indexid.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1573422571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_indexidUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcb\x31\x0a\xc3\x30\x10\x04\xc0\x5e\xaf\xd8\x32\x81\xfc\x20\x6d\x9a\xbc\x22\x5c\xa4\x35\x08\x4e\x67\x23\xaf\x40\xcf\x37\xd8\xe0\x7a\x98\xdc\x69\x22\x64\x7f\x27\x1a\x65\x78\x24\x00\xa8\x51\x38\xbf\x1f\x88\x53\x88\x55\x88\xe1\xfe\x3a\xe9\x2a\x05\xaa\x8d\xbb\xac\x6d\x28\x5c\x6c\xb8\x90\x47\xef\x0c\xfd\x6e\x49\xcf\x77\x3a\x02\x00\x00\xff\xff\xf5\x96\x99\x70\x62\x00\x00\x00")

func migrations8_indexidUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_indexidUpSql,
		"migrations/8_indexid.up.sql",
	)
}

func migrations8_indexidUpSql() (*asset, error) {
	bytes, err := migrations8_indexidUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_indexid.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1573422571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_titlesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\xdd\x6a\xc3\x30\x0c\x85\xef\xfd\x14\x87\x42\x51\x0a\x61\x17\xfb\xb9\x2a\x79\x96\xe2\xc6\xf2\x10\x73\xac\x62\x29\x4d\x18\x7d\xf8\xe1\xad\xec\xee\x08\x7d\x48\xdf\x89\xc5\xb9\xc1\xe3\xb5\x30\x92\xce\x86\xc6\x35\x2e\x8c\x59\xcb\xba\x54\xb8\x78\x61\xb8\xe2\xf0\x9b\x2e\x89\x0b\x3b\xa7\xcb\x01\x8f\x07\xcc\x5b\x76\x59\x78\xa0\xa3\xbd\x1c\x33\x8d\x54\x75\xa3\xd3\x39\x84\xd4\xf4\xf6\x3c\x9a\xdd\xce\x21\xcc\x8d\xa3\x33\xee\xd2\x7c\x8d\xe5\xb9\x92\x8c\xaa\x0e\xde\xc5\xdc\x3a\x88\xd5\xa4\x7e\xf6\xf4\x31\x04\x00\xf0\xdd\x47\xcc\x5a\x9d\xab\x4f\xd4\xfd\xe8\x7f\xbe\x34\xdd\x24\x4d\x24\x89\xc6\x3f\x58\xbf\xb8\xca\x37\x4f\x64\x55\xb7\x6b\x2c\x85\x46\xdc\x1a\x67\xd9\x27\x7a\xc5\x1b\xde\x29\x74\x39\xa9\xc6\xcd\x21\xd5\xb5\xbf\x1a\xb2\xdb\x09\xf7\x58\x56\xb6\x81\x1a\x5f\x57\x29\xa9\xb7\xf8\x09\x00\x00\xff\xff\x2f\xbb\x73\xbc\x1b\x01\x00\x00")

func migrations9_titlesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_titlesDownSql,
		"migrations/9_titles.down.sql",
	)
}

func migrations9_titlesDownSql() (*asset, error) {
	bytes, err := migrations9_titlesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_titles.down.sql", size: 283, mode: os.FileMode(436), modTime: time.Unix(1573581441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_titlesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\xc1\x6a\xc3\x30\x0c\x06\xe0\xbb\x9f\xe2\xbf\x29\x01\x53\xba\x76\x3d\x85\x3c\xcb\x70\x62\x65\x88\xb8\x72\xb1\x95\x36\xec\xe9\x87\x69\x19\x3b\xf4\x26\xa1\xef\xd7\x1f\x92\x71\x81\x85\x29\x31\x62\x9e\x2b\x42\x8c\x98\x73\xda\xae\x0a\x13\x4b\x0c\xe3\xdd\x06\xe7\x62\xc9\xb7\x97\x5b\xac\x0e\xce\xcd\x85\x83\x31\xee\x52\x6c\x0b\xe9\x75\x92\x05\x9a\x0d\xbc\x4b\xb5\xda\x20\xb6\x2a\xfa\xdd\xa6\x4b\xe7\x00\x3c\x9f\x7a\xd8\x6e\x1e\x73\x56\x63\xb5\x91\x5a\x33\xfd\xed\x5f\x25\x3f\x24\x8e\x24\x91\xfc\x33\x93\x57\x56\xf9\xe1\x91\xaa\xe6\xc7\x14\x52\x22\x8f\x5b\xe1\x45\xf6\x91\x4e\x38\xe3\x93\x5c\x3f\x38\x27\x5a\xb9\x18\x44\x2d\xb7\xc6\x6e\xb1\xda\xe3\x1e\xd2\xc6\xb5\xa3\xc2\xd3\x26\x29\x52\x3f\xbc\x73\x1e\x25\xe8\xfa\x4f\x07\x5d\xc9\x83\xa6\xeb\xe9\xd2\x9d\x0f\x47\x8f\x8f\xc3\xb1\x6f\xe1\xdf\x00\x00\x00\xff\xff\x19\x30\xce\x92\x32\x01\x00\x00")

func migrations9_titlesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_titlesUpSql,
		"migrations/9_titles.up.sql",
	)
}

func migrations9_titlesUpSql() (*asset, error) {
	bytes, err := migrations9_titlesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_titles.up.sql", size: 306, mode: os.FileMode(436), modTime: time.Unix(1573586283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_1Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xb1\x8e\xdb\x3c\x0c\xde\xf5\x14\x44\x96\xb3\x7e\xe8\x0f\xe2\x35\xc0\xb5\x28\x7a\xcb\x4d\x5d\xbb\xea\x24\xfa\xa2\xc6\x96\x0c\x91\x69\xae\x40\x86\x3e\x4d\x1f\xac\x4f\x52\x88\xb2\x1d\xa7\x97\x7a\x30\x25\xf2\xa3\x48\x7e\xfa\x74\x0e\x7c\x50\x83\x65\x77\x40\x02\x4b\xd0\x28\x00\x00\xc2\x1e\x1d\xcb\xb2\x7c\x39\x9d\x83\x37\xcb\xb6\x0b\x99\x58\x72\x9a\x8e\xc9\xc0\x4e\x97\x4c\x71\x7c\x4e\xfd\x69\x88\xff\x86\xb6\x57\xe8\x97\xae\x23\xe4\x2b\x34\xdb\x78\x2c\xc1\x2c\x9e\x2e\xa7\xe1\x7a\x0a\x93\xac\xcf\x07\xcc\xb8\xf6\xd6\x93\x60\x2f\x46\x02\x7d\x18\x02\xc3\xde\xd9\x51\x69\xa3\x88\x2d\xbf\x1b\x0b\x5c\x3a\x45\x6e\xfe\x93\x56\x5c\x64\xa9\x05\x13\x07\x4a\x2b\xb5\x9a\x9e\x46\xeb\xd0\x40\x96\xc6\x6c\x3c\x1a\x49\xb0\x04\x9c\xd8\xf6\x06\xbe\xa5\x10\xd1\x6f\x7d\x72\xcf\x4f\xc5\x3d\xd3\x44\xa7\x17\xe2\xdc\x6c\x7e\xff\xfc\xb5\x31\xd0\x1a\x68\x56\x33\xc3\x07\x68\xb5\x86\xcb\x45\xa0\x19\xc7\xde\x3a\x6c\x96\xb9\x5e\x91\x39\x1d\x31\x92\x50\xb6\xb8\xcb\xe7\x2c\xe1\x9a\xe8\x9b\xe0\xc4\x50\x84\x1d\x70\x31\x3e\x39\xda\x72\xe0\x1e\xef\xc3\xda\x35\xec\x8d\x6f\x40\x18\xfd\x6d\xe5\xc1\xbe\xad\x47\xf8\xbf\x2d\xd7\x6e\xa0\xdd\xe9\x2b\xee\xeb\xc3\xee\xd3\x83\x81\x0d\x6c\xc4\xa5\xe5\x7f\xb9\x80\xb0\x50\xd8\xa1\x18\xc6\x11\x59\x09\xe1\x77\x95\x36\xf1\xbd\xd6\xd2\x8d\x5a\x20\x1b\x90\x4b\xdd\xba\xc8\xa6\xf6\x2e\xe4\x4f\xeb\xe0\xdf\xab\x67\xbe\xd9\x79\xdf\x63\xc7\x72\x71\x92\x02\x29\xce\xa9\xf0\x38\x63\xb7\xa2\xf8\x25\xc3\xe5\x44\x54\x53\xa4\xf8\x12\xa8\xae\xd2\x33\xc1\x89\x42\x7c\x6d\x64\xf3\xfc\xa4\xef\xe8\x55\x42\x10\x22\x34\x1f\xf5\xe2\xb4\xd1\xd7\xf2\xb6\x0f\xdf\x2b\x36\x65\x8f\x19\x5e\x7e\x88\xea\xdc\x5a\xd5\x62\x2a\xa6\x0a\x69\x5f\xad\xd2\x93\x10\xd5\x5f\xb3\xd5\x9e\x82\xd7\xab\x40\x79\x36\x49\x4c\x9d\x12\x1e\xa1\x99\x1e\x46\xf0\xf5\x2d\x48\x6e\xad\xd9\x6a\xf5\x27\x00\x00\xff\xff\xc8\xa9\x9d\xe4\x23\x04\x00\x00")

func queriesSearch_1SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_1Sql,
		"queries/search_1.sql",
	)
}

func queriesSearch_1Sql() (*asset, error) {
	bytes, err := queriesSearch_1SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_1.sql", size: 1059, mode: os.FileMode(436), modTime: time.Unix(1573589721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queriesSearch_2Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xbd\x8e\xdb\x30\x0c\xde\xf5\x14\x44\x96\x93\x0a\x35\x88\xd7\x2b\xae\x45\xd1\x5b\x6e\xea\xda\x55\x27\xd1\x17\x35\xb6\x64\x88\x4c\x73\x05\x32\xf4\x69\xfa\x60\x7d\x92\x42\x94\x13\x3b\xfd\xf1\x60\x4a\xe4\x47\x8a\xfc\xf8\x9d\x22\xef\xd5\xe8\xd8\xef\x91\xc0\x11\x68\x05\x00\x40\x38\xa0\x67\x39\xd6\xaf\xe4\x53\x0c\xf6\x7a\xed\x63\x21\x96\x1c\xdd\x33\x59\xd8\x99\x9a\x29\x8e\x4f\x79\x38\x8e\xe9\xff\xd0\x6e\x81\x7e\xee\x7b\x42\x5e\xa0\xc5\xa5\x43\x0d\x16\xf1\xf4\x25\x8f\x4b\x15\x26\x39\x9f\xf6\x58\x70\xed\x6d\x95\xe0\x5e\x8c\x04\x86\x38\x46\x86\x7b\xef\x26\x65\xac\x22\x76\xfc\xd7\x58\xe0\xf3\x31\xb1\x7e\x23\xad\xf8\xc4\xf2\x16\xcc\x1c\x28\xa3\x56\xc3\xd3\xe4\x3c\xd2\x56\x8c\x85\x90\x3d\x6d\x43\xf6\x4f\x8f\x35\x33\x06\x7b\x49\xda\x16\x69\xdc\xa5\x83\x05\x79\x72\x5b\xcb\x3a\x02\xce\xec\x86\x36\x22\x1d\x9f\x89\x8b\xde\xfc\xfa\xf1\x73\x63\xa1\xb3\xa0\x57\x2c\xc0\x7b\xe8\x8c\x81\xf3\x59\xa0\x05\xa7\xc1\x79\xd4\xd7\x49\x5f\x90\x39\x1f\x30\x91\x90\x78\x75\xd7\xcf\x3b\xc2\x35\xf5\x37\xc1\x99\xb3\x04\x3b\xe0\x6a\x64\x00\x8e\x3c\xe0\xbf\x61\xdd\x1a\xf6\xca\x37\x20\x4c\xe1\xf6\xe5\xd1\xbd\xae\x47\x78\xdb\x55\x21\x58\xe8\x76\x66\xc1\x7d\xb9\xdb\x7d\xbc\xb3\xb0\x81\x8d\xb8\x8c\xfc\xcf\x67\x10\x16\x2a\x41\x94\xe2\x34\x21\xab\xeb\xba\x2f\x6b\xa8\xe7\xaf\x39\xb6\x66\x20\xcf\x4d\xc5\x00\x0f\x0b\xe9\x55\x95\x6d\xe9\xd8\x73\x43\x57\x4d\x64\x31\x2d\x0c\x0f\xa0\xe7\xad\xc7\xd0\x16\x2d\x05\x9b\x4c\x3a\xf3\x47\x7a\xdb\x37\x1c\x29\xa6\x17\xd0\x72\x7b\x7a\x6c\x20\x5f\x32\xd1\x8c\xaa\x2b\x56\x8b\x18\xa5\x35\x37\xc4\x6f\xed\xea\x52\x68\x85\x20\x26\xd0\x1f\x8c\xca\x25\x60\x81\xe7\xef\x37\x72\xf1\x17\xa9\x36\x93\x9b\x0e\xee\x9b\x7d\xa7\x7e\x07\x00\x00\xff\xff\x6e\xa2\x0b\x36\x98\x03\x00\x00")

func queriesSearch_2SqlBytes() ([]byte, error) {
	return bindataRead(
		_queriesSearch_2Sql,
		"queries/search_2.sql",
	)
}

func queriesSearch_2Sql() (*asset, error) {
	bytes, err := queriesSearch_2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queries/search_2.sql", size: 920, mode: os.FileMode(436), modTime: time.Unix(1573589944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_init.down.sql":         migrations1_initDownSql,
	"migrations/1_init.up.sql":           migrations1_initUpSql,
	"migrations/2_alive.down.sql":        migrations2_aliveDownSql,
	"migrations/2_alive.up.sql":          migrations2_aliveUpSql,
	"migrations/3_snowball.down.sql":     migrations3_snowballDownSql,
	"migrations/3_snowball.up.sql":       migrations3_snowballUpSql,
	"migrations/4_stemmerstate.down.sql": migrations4_stemmerstateDownSql,
	"migrations/4_stemmerstate.up.sql":   migrations4_stemmerstateUpSql,
	"migrations/5_spaceindex.down.sql":   migrations5_spaceindexDownSql,
	"migrations/5_spaceindex.up.sql":     migrations5_spaceindexUpSql,
	"migrations/6_prefixindex.down.sql":  migrations6_prefixindexDownSql,
	"migrations/6_prefixindex.up.sql":    migrations6_prefixindexUpSql,
	"migrations/7_interesttime.down.sql": migrations7_interesttimeDownSql,
	"migrations/7_interesttime.up.sql":   migrations7_interesttimeUpSql,
	"migrations/8_indexid.down.sql":      migrations8_indexidDownSql,
	"migrations/8_indexid.up.sql":        migrations8_indexidUpSql,
	"migrations/9_titles.down.sql":       migrations9_titlesDownSql,
	"migrations/9_titles.up.sql":         migrations9_titlesUpSql,
	"queries/search_1.sql":               queriesSearch_1Sql,
	"queries/search_2.sql":               queriesSearch_2Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_init.down.sql":         &bintree{migrations1_initDownSql, map[string]*bintree{}},
		"1_init.up.sql":           &bintree{migrations1_initUpSql, map[string]*bintree{}},
		"2_alive.down.sql":        &bintree{migrations2_aliveDownSql, map[string]*bintree{}},
		"2_alive.up.sql":          &bintree{migrations2_aliveUpSql, map[string]*bintree{}},
		"3_snowball.down.sql":     &bintree{migrations3_snowballDownSql, map[string]*bintree{}},
		"3_snowball.up.sql":       &bintree{migrations3_snowballUpSql, map[string]*bintree{}},
		"4_stemmerstate.down.sql": &bintree{migrations4_stemmerstateDownSql, map[string]*bintree{}},
		"4_stemmerstate.up.sql":   &bintree{migrations4_stemmerstateUpSql, map[string]*bintree{}},
		"5_spaceindex.down.sql":   &bintree{migrations5_spaceindexDownSql, map[string]*bintree{}},
		"5_spaceindex.up.sql":     &bintree{migrations5_spaceindexUpSql, map[string]*bintree{}},
		"6_prefixindex.down.sql":  &bintree{migrations6_prefixindexDownSql, map[string]*bintree{}},
		"6_prefixindex.up.sql":    &bintree{migrations6_prefixindexUpSql, map[string]*bintree{}},
		"7_interesttime.down.sql": &bintree{migrations7_interesttimeDownSql, map[string]*bintree{}},
		"7_interesttime.up.sql":   &bintree{migrations7_interesttimeUpSql, map[string]*bintree{}},
		"8_indexid.down.sql":      &bintree{migrations8_indexidDownSql, map[string]*bintree{}},
		"8_indexid.up.sql":        &bintree{migrations8_indexidUpSql, map[string]*bintree{}},
		"9_titles.down.sql":       &bintree{migrations9_titlesDownSql, map[string]*bintree{}},
		"9_titles.up.sql":         &bintree{migrations9_titlesUpSql, map[string]*bintree{}},
	}},
	"queries": &bintree{nil, map[string]*bintree{
		"search_1.sql": &bintree{queriesSearch_1Sql, map[string]*bintree{}},
		"search_2.sql": &bintree{queriesSearch_2Sql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
