// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/chart/index.html
// static/chart.svg
// static/chota.min.css
// static/index.html
// static/metrics.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _chartIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\x2c\x06\x04\x00\x00\xff\xff\xa4\x26\x3c\x47\x03\x00\x00\x00")

func chartIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_chartIndexHtml,
		"chart/index.html",
	)
}

func chartIndexHtml() (*asset, error) {
	bytes, err := chartIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chart/index.html", size: 3, mode: os.FileMode(436), modTime: time.Unix(1581020220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chartSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x4b\xc3\x40\x10\x46\xef\xfd\x15\xc3\xe0\xc1\x5e\x36\x43\x2d\x3d\x94\x6e\xc1\x8b\x9e\x0a\xd2\x82\xe0\xb1\xba\x63\x76\x20\xc9\xc6\xcc\x98\x0d\x84\xfc\x77\xd9\x8a\x9e\xe6\x31\x1f\x3c\xde\x3c\x67\xb1\x08\x77\x7d\x93\x6c\xef\xef\xa5\x0b\x3c\x81\xbb\xd8\xd5\xd8\xbd\x34\xc9\x14\xfe\x7e\x67\xfe\xfa\x66\x35\xf7\x94\x86\xd6\x49\x00\x5a\xaf\x97\x65\x35\xcf\xf2\x09\xee\xf2\xfa\x7c\xe3\x7f\xe0\x46\x79\x59\x56\x07\x1d\x6b\x18\x85\xf3\x7b\x9a\x3c\x12\x10\xec\xb6\x04\x9b\x2d\x21\xf4\x03\x2b\x0f\x23\x3f\x6a\xcf\x1f\x76\xbe\x9a\x24\x8f\xd3\x49\xc2\xdb\x49\x02\xb4\xcc\x86\x30\xb5\x4d\xa7\x1e\xa3\x59\xbf\xaf\xaa\x9c\xb3\xcb\x0f\x2e\x0d\x75\xb5\x21\xa2\x4a\xc7\x1a\x21\x4b\xb0\xe8\x71\x57\x94\x91\xa5\x8e\xe6\xb1\xf8\x8f\x87\xb2\x1f\x4b\x4a\x17\x7e\x93\x6e\xf7\x27\x00\x00\xff\xff\x91\xc5\xa5\x20\xf0\x00\x00\x00")

func chartSvgBytes() ([]byte, error) {
	return bindataRead(
		_chartSvg,
		"chart.svg",
	)
}

func chartSvg() (*asset, error) {
	bytes, err := chartSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chart.svg", size: 240, mode: os.FileMode(436), modTime: time.Unix(1582380322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chotaMinCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x6d\x73\xe3\xb6\xf1\x7f\xff\xff\x14\x8c\x6e\x6e\x6c\x5d\x48\x9a\xd4\x93\x6d\x2a\xf6\xfc\xdb\x74\xd2\x66\x26\x49\x67\x9a\x66\xfa\x22\x73\x9d\x81\x08\x48\x44\x0c\x02\x2c\x08\x59\xf2\x31\xfa\xee\x1d\x3c\x90\x04\x29\x52\xa2\x9d\x1b\x9f\xdb\x4c\xcf\xc2\x62\xb1\x58\xfc\xb0\xc0\x2e\x88\xc5\xd5\x87\xaf\x9c\x38\x61\x02\xf8\x71\x9e\x3b\x8f\x81\x7f\xed\x87\xce\xef\xce\x8f\xdf\xff\xd3\xf9\x01\xc7\x88\xe6\xc8\xf9\xdd\xd9\x60\x91\x6c\x57\x7e\xcc\xd2\xab\xdf\x10\xc5\xe4\x4a\xb5\x70\x3e\x5c\x45\x9c\x31\x51\x78\x5e\xcc\x08\xe3\x5e\xc6\x71\x0a\xf8\x53\xf4\x2e\x9c\xdd\xcc\x67\xeb\x65\x49\x27\x78\x93\x88\xbf\x72\xf4\x14\xbd\x83\x13\xb8\x80\xb0\xaa\xd9\x28\xe2\xf5\xec\x7a\x71\x13\x56\x44\x08\xf8\x83\xe6\x9e\xae\x67\xe1\x6c\x56\x55\x20\xce\x19\x8f\xde\xc1\xd9\xf4\x76\x7a\x5b\x51\xf3\x6d\x1c\xa3\x3c\x8f\xde\x4d\x6e\x56\x30\x94\xdc\x1b\x8e\xa1\x97\x82\xfd\xbf\x30\x14\x49\x14\x4e\x02\x8e\xd2\x92\xbc\xd9\x0a\x81\x78\x34\xd1\xa4\x35\xa3\xc2\xcb\xf1\x27\x14\x85\xfe\xc2\x22\xad\x41\x8a\xc9\x53\xe4\x81\x2c\x23\xc8\xcb\x9f\x72\x81\x52\xf7\xcf\x04\xd3\x87\x1f\x41\xfc\xb3\x2a\x7e\xc7\xa8\x70\xff\xf4\x88\x28\xe6\xee\x48\xff\x75\x7e\x42\x7b\x31\x72\x47\x3f\xa3\x0d\x43\xce\x2f\xdf\x8f\xdc\xd1\x3f\xd8\x8a\x09\x36\x72\x47\x7f\xdf\x3f\x6d\x10\x1d\xb9\xa3\x5f\x56\x5b\x2a\xb6\x23\x77\xf4\x2d\xa0\x02\x70\x44\xc8\xc8\x1d\x7d\x87\x39\x70\x7e\x06\x34\x1f\xb9\xa3\xbf\x70\x86\x61\x59\xf8\x1b\x22\x8f\x48\xe0\x18\x38\x3f\xa1\x2d\x1a\xb9\x39\xa0\xb9\x97\x23\x8e\xd7\x87\x0f\x85\xb7\x43\xab\x07\x2c\xbc\x15\xdb\xcb\x41\x60\xba\x89\x56\x8c\x43\xc4\x25\x65\xd9\x49\x3d\x24\x22\x25\x45\x3d\xec\xc5\xc4\x9f\xbf\x5f\x12\x4c\x91\x97\x20\x39\x4d\x51\xe8\x87\xf3\xa5\x97\xe6\x9e\x40\x7b\xcd\xe4\x01\xf8\xdb\x36\x17\x51\x18\x04\xef\x97\x65\x9f\x9d\xb5\x87\x15\x83\x4f\x45\x53\xda\x62\x59\xf7\xf6\x08\xf8\xa5\x05\xfa\x78\x69\x83\x5d\xa2\xe6\x36\xc7\x6c\x0d\xb9\xc1\x6e\xc9\xd2\x94\xf1\x32\x05\x7c\x83\x69\x14\x2c\x33\x00\xa1\x1c\x77\x70\x48\x42\x37\x99\xb8\xc9\xd4\x4d\x66\x6e\x32\x77\x93\x85\x1e\xfb\x4e\x6b\x37\x0f\x82\xb2\x91\x3f\x9d\xa3\xd4\x09\x1c\xff\x1a\xa5\x87\x24\xb4\x20\x9a\x48\xc2\xa4\xb0\x4d\xe5\x7a\x2e\x69\xd3\x06\x4d\x91\x66\x0d\xd2\x44\xd1\xe6\x36\x4d\x12\x16\x16\xc1\xbf\x91\x3c\xa0\x50\xa6\x6c\xc6\xd4\x58\x4c\xe3\xa5\x42\x1a\xa2\x98\x71\x20\x30\xa3\x11\x65\x14\x1d\x40\x94\xb0\x47\xc4\x23\xca\xc4\xa5\xbf\xda\x0a\xc1\xe8\xb8\x60\x19\x88\xb1\x78\x8a\xfc\xeb\xf9\x41\xd3\x0a\x1b\x31\x4c\x13\xc4\xb1\x38\x64\x85\x1e\xb3\x27\x58\x16\x05\x87\x15\x61\xf1\xc3\x7f\xb6\x4c\xa0\x62\x05\xe2\x87\x0d\x67\x5b\x0a\xb5\x12\xd1\xbb\xf5\x74\x3d\x5d\x2f\x2a\x40\x43\x7f\xce\x51\xea\xa8\xd5\x63\x8c\x8a\xa0\xb5\x88\xa6\xd9\xde\xc9\x19\xc1\xd0\xb1\x87\x50\xad\xfb\xf1\x01\x12\x07\x8a\x06\xf6\xd7\x41\x70\x48\xf8\x71\x97\xdd\x02\x96\xa5\x3d\x65\xfb\x72\xc6\x42\xa9\x89\x94\xe1\x0a\xb0\x22\xa8\xd0\xfa\x68\x78\x34\x65\xa7\xd7\xbf\x34\x5b\xa3\x6c\xcc\x08\x01\x59\x8e\xa2\xf2\x47\x59\x91\x4b\xe8\xa4\xc5\x68\xb8\x01\xc1\x1b\x1a\xc9\xa1\x69\x51\x7e\x2e\x38\xce\x10\x74\x04\x8f\xa8\x48\x3c\xb6\xf6\xc4\x53\x86\x2e\x27\x74\xdc\x0b\xda\x41\x40\x57\x24\xc5\x23\xe2\xd2\x96\x89\x91\x99\x62\x08\x09\xb2\x00\x95\x58\x3a\xfe\x8c\xa3\xf4\x20\x12\x04\x60\x51\x2d\x56\x21\x58\x1a\x4d\xce\x21\x2b\xd6\x72\x0b\x36\x8d\xe4\x8c\x9e\x6d\x11\x33\x88\xdc\x87\x15\x74\x33\x2e\x57\x57\x9a\xb9\x42\x34\x0c\x25\x65\x14\xc4\xcc\xfd\x96\xd1\x9c\x11\x90\xbb\x3f\x6c\x63\x0c\x81\xa3\xcb\xc8\x4d\x19\x65\x12\x2f\x54\x49\xb2\x0c\xfa\x36\x78\xbf\xdc\x25\x58\x20\x05\x29\x8a\x32\x8e\xbc\x1d\x07\x59\x09\x34\x07\x10\x6f\xf3\x68\x96\xed\x97\x06\x2d\xb3\x9d\x97\x88\xf8\x13\x85\x07\x4a\x1b\x7a\xf6\xa3\x2c\x2b\x1b\x0b\xac\xc6\x56\x5a\xa9\x5c\x25\x6b\xc2\x76\xde\x3e\x02\x5b\xc1\x24\xbb\x23\x05\x5b\x02\x95\xc9\x58\x7b\x06\x58\xad\xf8\xaf\x02\x0b\x82\x3e\xb6\x26\x43\x31\xb6\xd7\xe3\x96\x42\xc4\xe5\x9e\xd7\xdc\x1b\xbb\x38\x1c\xc8\x84\x40\xb0\x5f\x84\x61\x38\xe0\x74\x53\xa4\x60\xef\xd5\x16\x7c\x58\x63\x44\x60\x8e\xca\xa9\x96\x2b\xe1\xf4\x34\xe3\x35\x07\x69\xb5\x2c\x82\x83\x1f\x33\x2a\x00\xa6\x88\x5b\xa2\x75\xdb\x86\xc3\xac\xf7\x51\x47\x22\xb6\xd4\x8c\xb7\x8b\xf7\x35\x44\x4e\x0c\x48\x7c\x69\xb5\xd5\x5e\x75\x7c\x35\x19\x1f\x7c\xce\x76\x05\xc4\x79\x46\xc0\x53\x64\x79\xa8\x65\x45\x4b\x73\x6f\x4d\xd0\xde\xa6\xc9\xf2\xd2\x76\x67\x10\x73\x14\x9b\xed\x8e\xa7\x80\x2c\xcb\x56\x9e\x9c\xcc\x88\xb3\x9d\xa3\xac\xaa\x83\x64\x8b\xc9\x40\xfc\x10\xe5\x02\x70\x51\x0b\xb0\x68\xd2\x71\xe1\xf5\x93\x27\x91\x41\x54\x28\x35\x3c\x5d\x65\xb6\x48\xb5\xbb\xf5\x8d\xd6\x9b\x94\x58\x79\x5c\xed\x4e\x27\x18\x15\x2e\xae\xfc\xc7\xe7\xe8\x11\xf1\x1c\x35\xdc\x37\xe3\x58\x2a\x90\x30\x8e\x3f\xc9\x69\x22\x87\x5e\xd6\x1a\x1a\x53\x5b\x0f\xcd\xaa\x62\x3b\xaf\xac\xee\xaf\x92\x36\x41\x1a\xc2\x25\x6f\x14\x56\x12\xa3\x70\xa9\xff\x28\x4e\xf7\xd7\x98\x80\x3c\xff\x70\x37\x72\x62\x46\xbc\xd1\x47\x43\xf8\xf7\x9d\x2c\x7e\x2c\x2a\xbb\xe9\x37\x8f\x93\x96\x23\xa5\x84\x45\xd5\x77\xe0\x18\x49\x37\xfe\x54\xfe\xef\xbd\xe3\x39\xc7\x2d\xc7\xcb\x67\x31\xd7\xa6\x3f\x80\xdb\xa8\xe4\xaa\x3f\x93\x63\xa0\x82\x43\x59\x73\xa4\x73\xb8\xf0\x17\x8b\xc5\xe2\x7a\x98\xd2\xe7\xb8\x5b\x5a\x9f\x61\xd7\x5a\x4d\x3b\xb4\x9a\xcc\x87\xe9\xd3\xcf\xd7\xd2\xa4\x97\xd1\xe8\xa0\xa1\x9b\xf5\x42\x37\xeb\x50\x72\x3a\x7d\xce\x7c\x9f\xe3\x6e\x29\x7c\x86\x5d\x6b\x35\xef\xd0\x6a\x16\x3e\x67\x42\xcf\x71\xb7\xb4\x3a\xc3\x6e\xb4\xd2\x60\x2e\x7a\xc1\x5c\x74\xa8\x3d\x0f\x86\x29\xdc\xcf\xd7\x52\xb5\x97\x51\xeb\x70\xdd\xa5\xc3\xb3\x16\xf0\x39\xee\xb6\x3e\x43\x96\xf0\xb5\x86\xee\xa6\x17\xba\x9b\x0e\xb5\x17\xcf\x5a\xc2\xe7\xb8\x5b\x6a\x9f\x61\xd7\x5a\xdd\x76\x68\x75\x3d\x70\x09\xf7\xf3\xb5\x34\xe9\x65\x34\x3a\x68\xe8\xc2\xa0\x17\x3b\x59\x75\xbc\x67\x3f\x6b\x11\x9f\xe3\x6e\xef\xda\x43\x16\x71\xd8\xe5\x4a\x6e\x9f\xb5\x8a\xcf\x71\xb7\xd4\x3a\xc3\x5e\xaa\x65\x00\xed\xf7\x27\x61\xa7\x43\x09\x06\xae\xe4\x13\x8c\x6d\x37\xd2\xcb\x79\xf8\xff\x14\x41\x0c\x9c\x3c\xe6\x08\x51\x07\x50\xe8\x5c\xd6\x8d\xe7\xb7\xb7\xd9\x7e\x5c\x58\x01\xa5\x15\xa7\x36\x02\x05\x15\x17\xb4\xa2\x84\xe3\x51\x2f\xad\xd1\x86\x8e\x3a\xaf\x35\x4b\xad\x50\xb8\x53\x3b\x4c\x0d\xcb\x6d\x10\x18\xed\x88\x17\x7a\x29\x3c\xd3\xe1\xdb\x88\x31\x26\x83\x15\x7d\x03\x81\xc5\x60\x5d\x5f\x3b\xdc\x98\x0d\xd6\xec\x0d\xc4\x18\x83\x75\xfd\xf2\x91\xc7\x62\xb0\xae\xaf\x1e\x6e\x0c\xd7\xec\x8b\x07\x21\x37\x83\x75\x7d\x03\x91\xc7\x60\x5d\x5f\x3b\x1e\x09\x83\xe1\x7b\xfa\x1b\x88\x41\x06\x2b\xfb\x06\x22\x93\x67\x38\xa1\x57\x0d\x46\x4e\xfb\xfb\x70\xd2\x70\xf8\x64\xf3\x3f\xe2\xf0\x87\x2a\xfa\x16\x1c\xfe\x50\x5d\x5f\xdf\xe1\x0f\xd5\xec\x2d\x38\xfc\xa1\xba\xbe\x05\x87\x3f\x54\xd7\xd7\x77\xf8\x83\x35\x7b\x03\x0e\x7f\xa8\xae\x6f\xc1\xe1\x0f\xd5\xf5\x0b\x38\xfc\xc1\x7b\xfa\x5b\x70\xf8\x43\x95\x7d\x13\x0e\x7f\xb0\x13\x7a\x5d\x87\x5f\x5d\x76\x55\xb7\x82\xd5\xbd\xf3\x81\xa0\x0d\xa2\xb0\x50\x77\x68\x82\x03\x9a\xaf\x19\x4f\xa3\x6d\x96\x21\x1e\x83\x1c\x2d\xed\xcb\x75\x94\x2e\x09\x92\x42\xab\x0b\x5e\x3f\x94\x32\x30\xcd\xb6\x42\x5d\x9e\xff\x2a\x9e\x32\x74\x17\x27\x28\x7e\x58\xb1\xfd\xc7\xb1\x45\xe4\x00\x62\xd6\xa0\xe4\xdb\x55\x8a\x45\x83\xa4\xae\xdd\x1a\x14\x7d\xf3\xde\x94\x84\x72\x24\x3e\x8e\xdd\x1c\x11\x14\x0b\x57\xaa\x0e\x38\x02\xd5\x0f\xcd\x25\x4b\x1f\xbb\x6e\xec\xeb\xbb\xd1\x1b\x89\x42\x68\xdd\xbe\x5b\xd7\xa9\x03\xef\x05\x97\xcd\xcb\xd2\xea\xce\x52\x22\x89\xd5\x05\x11\x20\xc4\xf1\x27\xb9\x83\x24\x9a\x7d\xf4\xf2\xe6\x4e\x65\x0f\x2c\xad\x8f\x33\x5f\x06\x5a\x45\x89\x20\xce\xc1\x8a\x20\x38\xd6\xd9\x11\x06\x6f\x53\x28\xc1\x6e\x15\x2d\xec\x75\x4d\x51\xe7\x0a\xb4\xd2\x11\x36\xfa\x5e\xf5\xcb\x0c\x70\xcd\xe2\x6d\x5e\x8e\x48\x17\xaa\x11\x35\x8b\xf6\x88\x54\x4d\xc1\xb6\x82\x60\x8a\xf4\xfd\x75\xef\xf0\xaa\x8c\x93\x46\x5e\x51\x02\x20\xdb\xa9\xf5\x2d\x2d\xab\x93\x7f\x20\x9f\x46\xce\xd7\x59\x5c\xaf\xbe\xf6\x4a\x74\x74\xff\xfd\x93\xac\xaa\x4b\x5d\xcb\xdc\xb2\x2f\xa7\xad\xd1\xa0\x5f\x5f\xc3\x30\x3e\x68\xd3\xa8\xb6\x73\x90\x65\x08\x70\x40\xe3\x72\xda\xeb\x7c\x07\x93\x3a\xe1\x50\xe6\x71\x94\x21\x20\xf4\x57\x56\x2b\xc5\xc2\x6c\x0f\x7b\x9b\xc6\x38\xde\x60\x1a\x99\xbb\x72\x9d\x62\x56\xd7\xe2\x14\x6c\x50\xb4\xe5\xe4\x72\x04\x81\x00\x91\x2a\x5f\xe5\x8f\x9b\xaf\xf7\x29\x59\x6e\xc5\xfa\xc6\xfd\x26\x7f\xdc\x38\xfb\x94\xd0\xfc\xee\x22\x11\x22\x8b\xae\xae\x76\xbb\x9d\xbf\x9b\xfa\x8c\x6f\xae\x26\x41\x10\x48\xfe\x0b\x47\x6d\x26\x77\x17\x8b\xe0\xc2\xd1\x59\x3f\x77\x17\xb3\xe0\xc2\x59\x63\x42\xee\x2e\xde\x4f\xa6\xf3\xf9\xfc\xe2\xfe\x9b\x8c\x91\xa7\x0d\xa3\x4e\xc6\x30\x15\xf9\xdd\x45\xe0\x06\xce\x42\xfe\x33\x0d\xdc\x59\x70\x71\x75\xff\x8d\x94\x76\x3f\x1a\x1f\x5a\x13\xe7\xda\x73\x56\x7e\xb9\xd6\xd9\x7f\x75\xd2\x9a\x74\x12\x26\xaf\xca\x6d\x4c\x96\x6b\xcf\x93\xdb\x98\x6c\xd7\xe4\x5c\xd9\xf9\x27\xce\x44\x79\xae\xe5\xf1\xbc\x95\x59\x8e\x63\x7b\x66\x7a\xb6\xec\x01\x9b\xbd\xda\xa7\x33\xc0\x11\x15\xa7\x12\xee\x1a\xb9\x79\x76\xae\x53\x8c\xa8\x40\xbc\xcb\x1d\x98\xac\xb2\x4e\x97\x70\x5c\xd7\x91\xac\xd6\x14\xaa\xbc\x75\x1e\x03\x82\x2e\xc3\xf1\xb2\x83\x54\x7a\x16\x4c\x95\xb2\xda\xc1\xc4\x5b\x9e\x33\x1e\xa9\xc9\x46\xfc\xe0\x4b\xbc\x32\x04\x5f\x94\x68\x52\xb5\xbe\xd7\x5e\x83\x80\x5c\x78\x71\x82\x09\x1c\x17\x8d\x74\x8e\x70\x91\xd5\xcc\xfe\x06\x64\x04\xe5\xf9\xfd\x87\x3a\xcf\x41\xfe\xe7\x85\xd9\xfe\x2b\x9c\x66\x8c\x0b\x40\x45\x6b\xaa\x82\xba\xe6\x58\x50\xb4\xc6\xbc\xec\xb9\x92\xd9\x2b\x6a\x96\xed\x55\x7f\x33\xbb\xbb\x0e\xa1\xf5\x68\x8a\x96\x2e\xb2\xa9\xfa\x7f\x43\x2b\x6d\xb4\x5f\x9b\xbf\x85\x9d\xf7\x12\x5a\xab\xc0\x78\xcd\xc6\x5a\x68\xd0\xf4\x8a\x68\x90\xcc\xba\x30\x34\x5b\x4e\x9d\xaa\x78\x53\x75\x00\x62\x81\x1f\x51\xab\x87\x06\xd1\x74\xd1\xa0\x95\x7d\x18\x62\x43\x56\xd1\x67\x78\xfe\xed\xcd\xb1\xe9\x49\xa2\x49\x9b\xac\x02\x09\xb7\x55\x36\x43\xd1\x21\x40\xc5\xd4\x2c\xb6\x47\x38\x2b\x8d\x97\x32\xb9\xd8\x08\xdb\x21\x58\x0e\xda\x97\xbb\x80\x5b\x16\x94\xeb\xa9\x4a\xc6\x6d\x56\xe5\x1c\xc5\x8c\xc2\x06\x45\x6f\xfd\x4d\x24\x8a\x32\x3d\x6e\xbd\x5e\x7e\xf2\x30\x85\x2a\x8b\xe7\x38\x7d\x2e\x08\x82\x63\x6a\xa7\xdb\x3e\x52\xe0\x74\xd2\xa6\x8e\x92\xec\x01\x9e\xe6\xaf\x36\xc2\x43\x03\x87\xd3\x8d\x8c\x97\x6e\x21\x71\xba\x4d\xe5\x29\xcb\x56\x26\x2c\x3a\x6e\x65\x6f\xa6\xbd\x8e\xd7\x4a\xb5\x6b\x09\x2c\xa7\xae\xdf\x69\x57\xa1\xd3\x00\xd8\x4b\xa1\x16\xfc\x27\x03\xd4\x0e\x99\x9b\x4e\x2d\xf5\xd4\xf4\xc9\xaa\xfd\xd3\x90\x29\x8b\x09\x02\x1d\x53\xd6\x0b\xa4\x5d\x31\x00\x03\x1c\x33\x7a\xb4\xd7\x97\x0e\xa2\xb5\xe5\x1b\x72\x7b\xe7\xb7\xc8\x8d\x00\xb7\xe9\xfe\xca\x4c\xba\x06\x55\x15\x3c\x2c\x50\x9a\x1b\x52\x43\xb1\x7b\x9d\xad\x59\xef\x9b\x13\xe9\x36\x2c\x06\x8f\x51\xf2\xd4\x08\x0b\x0e\x91\x35\x8a\x6c\x2b\xbc\x8c\x80\x18\x25\x8c\x40\xc4\xcb\x05\xbc\x82\xab\x75\x3c\x93\x9c\x29\xfb\x74\x8a\x41\x0f\xfa\xbc\x94\x21\x5c\xfd\x75\x3e\x05\x8f\x2f\xcb\xeb\x4c\x31\x2d\x43\x0e\x15\x0b\x1d\xa3\x9f\x0b\x8e\x44\x9c\xb4\xe1\x2f\xc9\x36\xfe\x86\xa6\xd4\x71\xca\x34\x59\x23\x7d\xaa\xfc\x15\x05\x8f\x9e\x9e\x25\x57\xfd\x96\x53\xa2\x7f\x29\xaf\xae\x7e\xde\x5b\xb9\x0b\x2f\x0b\x21\xce\xf4\x32\x30\xa9\xb2\x6c\x59\x7c\x96\xa4\xd5\x43\x4f\xff\xaa\x31\xa2\xb0\x25\x4e\x52\x3a\x85\x21\x0a\xed\x01\x1e\xcb\x6a\xaf\x16\x9b\xd8\x96\x68\x16\xcc\xc9\x84\x92\xd9\x8d\xbe\xc1\xa1\xe0\xf1\x68\x7a\x3a\xb2\x64\xcb\x94\xfa\x81\x19\xc3\x75\x4d\xcc\xc8\x36\xa5\xed\x84\x58\x4d\x1d\x30\xa5\xa5\xc0\x1d\x07\x59\x54\xa7\x1f\xd7\xc5\xcf\x01\x94\xb6\x6c\x7f\xc5\x01\x85\xaa\x77\x07\x14\x9d\x51\xf5\x1f\xce\xb1\x7e\xd1\xce\xb7\x6c\x9e\x6e\xce\x9c\x6d\xcc\x60\x74\x38\xd6\x7c\xac\x62\x85\x21\xa7\x1c\x40\x0d\xc6\xd1\x0b\x9c\x52\x15\xfd\x8e\xa5\x2a\x99\x5c\xfd\xc0\x6e\xab\x76\x8a\x92\xc1\x04\xf7\xe5\x66\xe1\x34\x43\x5f\xf5\x4c\xc0\xd1\xb5\x31\xe0\xb0\x38\x1e\x70\xc7\x71\xcc\x3e\x5c\xaf\xd7\xdd\x5f\x50\xe4\x61\x6d\x9a\xed\x1d\xbe\x59\x81\xcb\xc0\x95\xff\xf9\xd3\xd6\xd7\x93\x6e\x1e\xad\x89\x93\xd9\xc1\x7d\x79\x60\x30\x75\x09\x02\x10\xf1\xea\x70\x62\x30\x31\x05\x03\x89\x1e\x94\x00\xab\xfc\x85\x9b\x9e\x6c\xda\x63\x8e\xba\xf2\xde\x87\x9c\x65\x90\xed\xe8\x7d\xbe\x4d\x75\xf8\xaa\xe8\xa0\x03\xc6\x73\x89\x60\xea\xf5\x41\xb3\x74\xf2\x18\xfd\xac\x77\x33\xc7\x67\x5f\x33\x02\x60\xac\xb5\x54\xbc\x15\xce\x87\x83\xfa\xb1\x16\x40\x43\xe8\xf9\x88\x50\x37\xf0\x71\xee\xad\xb7\x84\x38\xe0\xb4\x23\x69\xa0\x54\x96\xa4\x88\x4d\xd1\x79\x8c\x1e\xfa\x8d\xb8\xf7\xe3\x7a\x5f\xcc\xd9\xf8\x4e\xdf\xfa\xca\xd0\xfe\x02\x3f\xcf\x94\x29\x6d\xe4\x20\xf3\x14\x10\x52\x7f\xe5\x9f\xc9\xd6\xd6\x07\x7c\xf5\xd0\xae\xe4\x25\x80\x6f\x50\xcd\x7b\xdd\xe4\x0d\xfd\x70\x52\x72\x7f\xad\x10\x38\x3a\xca\x42\x24\x00\x26\x79\x65\xa3\x45\xc6\xcc\x77\x0c\x8e\x08\x90\xf3\xd3\xf9\xf1\xe1\xa8\x5d\xe3\x90\x5d\xc9\x00\xab\x9c\x91\xad\x40\x4b\xd5\x61\xd0\x78\x05\x45\x99\xf4\x0f\x07\x7f\xb5\xf1\xaa\xb3\xc1\x90\xb3\x57\xe3\xa0\xbe\xd1\x33\x34\xf4\xc9\x5c\xab\xed\x33\x0e\x62\xad\x96\x72\x86\x07\x1c\xf9\x5a\xad\x06\x1f\xe2\x5a\xed\x9e\x75\x94\x6b\xb4\x85\x5e\xf3\xdc\xd5\x63\xe6\x9d\xd8\xc2\x12\xdb\x61\x0b\xa4\xd5\xd6\x3a\x49\xf5\x34\xed\xc6\x16\x1a\x6c\x4f\xb5\x3c\xc6\x16\x7a\xf6\x27\xec\x9e\x66\x1d\xd8\x42\xaf\xf9\x31\xb9\xa7\x65\x17\xb6\x6a\x3f\x28\xd1\x1d\x66\xae\xaa\x89\x06\x75\xa8\x95\x6a\xbf\x22\xb1\x1c\x68\x9c\xaa\x81\x82\x70\x80\x4d\x2a\x66\x8d\xdc\x10\x53\xd4\x0f\x9c\x0d\x60\xc3\x2c\x50\x35\x51\xcb\xde\xfa\x08\x63\x33\x64\x5b\x42\x4c\x30\xb9\x26\x0c\x88\x48\xfd\x3e\xe2\x50\x27\x02\xcd\x20\x7f\x1e\x75\x61\xc2\xf2\x2e\x0f\xa6\x40\x97\xcd\xdb\xcf\x58\x75\x95\xee\xdb\xaa\x53\x04\x53\x69\x02\x52\xbb\xda\x90\x0c\x43\xe5\x06\x7a\x2f\x5f\x4b\x0d\xd8\xae\x9b\xb1\xaa\x28\x47\x02\x32\x2c\x00\xc1\x9f\x8e\x38\xeb\x9a\x43\xe9\x0c\x3d\x7d\x78\xb0\x9f\xf5\x5a\x47\xcb\x30\x08\x1e\x93\x9a\x57\x31\x59\xac\x36\x88\x38\xf7\x9a\xaf\x72\xff\xf8\x7b\xc5\x17\x7e\x45\xc0\x79\x75\xe2\xc0\xb9\x57\xbf\xfe\xfb\x5c\x6a\xbd\xf4\x10\x52\x2b\x56\x7c\x9e\x51\x7e\xa6\x43\xa9\x8c\x02\xd4\xa9\xac\x12\xf9\x05\x67\xee\x73\x1e\xdc\xa5\xd9\xe2\x3d\xb2\xc2\x09\x55\xb4\x2f\xd6\x25\x8f\x09\x7e\x88\xdc\x93\xaa\xd7\xb8\x2d\xd3\xd6\x61\x8f\x62\x39\xbe\x54\xd0\x52\xf4\x2d\x4a\xd1\xbc\x54\x69\x31\x29\xd7\x8b\xda\x97\x08\xe6\x89\x07\x41\x80\xaf\xf1\xbe\x28\x87\x32\x1a\x55\x00\xab\xf7\xf2\x4b\xc5\x11\xad\x98\xd0\x4b\x32\xc1\x10\xa2\xda\x9e\xe5\x81\xc1\xea\x6e\xd0\x63\x93\x04\x43\xe4\xed\xf3\x3e\x19\xa7\x73\x44\x17\x2a\x45\xb4\x2d\xfa\xc6\x16\x9d\xa7\x2f\x13\x7d\xdb\x29\x3a\x0c\x6d\xd9\x29\x7c\x99\xec\x2a\xb5\x55\x49\x21\x9b\x73\x52\x32\x8e\xa9\x30\xdc\x19\xef\xe5\xfe\xbf\xff\x06\x00\x00\xff\xff\x7e\x71\x70\xa4\xf5\x45\x00\x00")

func chotaMinCssBytes() ([]byte, error) {
	return bindataRead(
		_chotaMinCss,
		"chota.min.css",
	)
}

func chotaMinCss() (*asset, error) {
	bytes, err := chotaMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chota.min.css", size: 17909, mode: os.FileMode(436), modTime: time.Unix(1581024570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x8f\xe3\x34\x17\xbe\x7f\x7f\x85\xe5\x77\xb4\x0b\x62\x1b\xef\xc0\xb2\x42\x43\x12\x58\x18\x21\xad\x34\x0b\x48\xb3\x2c\xd7\xa7\xf1\x69\x63\x29\xb1\x23\xfb\xa4\x9d\x92\xed\x7f\x47\x8e\xd3\x8f\x74\xfa\xdd\x4a\x08\x89\x5c\xa4\x13\xe7\xf8\x39\x9f\x7e\x9c\xe3\x89\x73\x2a\x8b\xf4\x7f\x8c\x31\x16\xe7\x08\x32\xfc\xd9\x3e\x96\x48\xc0\xb2\x1c\xac\x43\x4a\x78\x4d\xa3\xc1\x77\x5c\x6c\xbe\xd7\x50\x62\xc2\x27\x0a\xa7\x95\xb1\xc4\x59\x66\x34\xa1\xa6\x84\x4f\x95\xa4\x3c\x91\x38\x51\x19\x0e\xda\x87\x57\x4c\x69\x45\x0a\x8a\x81\xcb\xa0\xc0\xe4\x36\x7a\xdd\xc3\x73\x34\x2b\x70\xf5\xec\xaf\x1f\x55\xe9\x61\x59\x6d\x8b\x2f\x5e\xe6\x44\x95\xbb\x13\x62\x64\x34\xb9\x68\x6c\xcc\xb8\x40\xa8\x94\x8b\x32\x53\x8a\xcc\xb9\x1f\x46\x50\xaa\x62\x96\xfc\xa2\x2c\x7c\xf5\x08\xda\xbd\x90\xca\x55\x05\xcc\x12\x37\x85\xea\x85\xab\x87\xde\x91\x02\x48\xe9\x01\x3e\xd1\xcb\x2f\xbf\xdf\xa9\x4b\x64\xb9\x21\x88\x4a\xa5\xa3\xcc\xb9\x0d\xc1\x3b\x6b\x0c\xb1\xa6\x37\xe6\xaf\xc1\xc0\x5b\x36\x08\x56\xdc\x31\xee\xed\x60\xde\x0e\xfe\x8a\x39\xd0\x6e\xe0\xd0\xaa\x51\x1f\x6b\xbe\x72\x5f\x6c\xf8\x1f\x93\xa2\x02\xd3\x07\x24\xb0\x48\x84\xac\x34\x5a\x91\xb1\xb1\x08\x2f\x42\xce\xc4\x2a\x69\xf1\xd0\xc8\xd9\xda\x7c\xa9\x26\x2c\x2b\xc0\xb9\x84\xfb\xac\x80\xd2\x68\x79\x3f\xbe\xb1\x86\xa5\x8c\x86\xc9\xc6\xdb\x4d\x14\x0d\x93\x41\x81\x23\xda\x22\x16\x12\x58\x81\x5e\xc8\x12\x3e\xd1\x60\x6c\x71\xc6\xd3\x0f\xc1\x6e\xd6\x34\xd1\x23\x01\x61\xf4\x09\xad\x53\x46\xcf\xe7\xb1\xf0\x53\xb6\x28\x15\x52\x4d\x0e\xdb\x92\xa1\xa6\x67\x2e\x2d\x85\x61\x21\x3a\xb4\xa0\x25\x67\xb9\xc5\x51\xc2\xff\xcf\x57\x11\x8d\x05\x9c\xad\xdb\xaa\x71\xbe\x33\x10\x6b\xb2\x04\x43\xb7\x43\xac\x6f\x25\x64\xa4\x26\xc8\x53\x1f\xa2\xda\x6d\x35\x6d\x6d\x52\x70\x46\x94\x48\x56\x65\x2e\xf2\x8b\x98\xa7\x1f\xc2\xd3\xce\xb9\xbb\x5c\x7b\x3e\x1c\x0b\x0d\x9b\x43\x6b\x4e\x59\x33\xe5\x69\xbf\xbe\x0a\x9e\xc6\xf9\x9b\xa5\xf5\xf9\x9b\x34\xc0\x6e\x03\xdf\x44\xda\x1b\xec\x16\x7a\xbb\x3b\x04\xc3\x4d\xc2\xe8\xbf\xef\x13\xda\x76\x19\x9b\xc6\x94\xa7\xef\xb5\xc4\x27\xf6\xfe\x3e\x16\x94\xfb\x81\x85\xf6\x5c\x49\x1c\x3c\x39\x9e\x3e\xe6\x60\xe5\xd8\x9a\xba\xda\x29\x72\x6f\xb2\xba\x44\x4d\x6e\x21\xb1\x8c\xc6\xd6\x09\xac\xfd\x75\x25\x4f\xff\xa8\x24\x10\xca\x20\x27\xc8\xee\x71\x49\x1c\xf0\x29\xa6\x3e\x09\x6c\xbb\x9a\xc6\x82\x1e\x23\xeb\x56\x63\xeb\x7a\xb0\x74\x3e\x3f\x18\xac\xbd\x02\x41\xe8\x40\xc8\x97\x82\x12\x09\x54\xe1\x16\x61\x91\xd6\x54\xd2\x4c\xf5\x9e\xd5\xf2\x0c\xc2\xd5\x65\x09\x76\x96\x36\x4d\x70\xe3\xfd\x7d\x4b\x2a\xdd\xe8\xf1\x38\x23\x63\x4b\x56\x22\xe5\x46\x26\xfc\xf7\xdf\x1e\x3f\xf2\x65\xf9\x81\x95\x9c\xf9\xc5\x69\x74\xc2\x45\x55\x18\x12\x20\xe5\x09\x46\xb6\x0a\x94\xae\x6a\x62\x34\xab\xb0\xcd\xbf\x44\xcd\xbb\xad\x53\x79\xbb\x39\x9b\x40\x51\x63\xc2\xd7\x1d\x59\xdf\x1c\x8f\xf3\x42\x61\x21\x1d\xd2\xfe\xc5\x75\x10\xa6\xc0\x31\x6a\x99\xbe\x93\x92\x05\x7e\x61\xde\xeb\x58\x74\xe3\x67\x00\xc2\x10\x8b\xb5\xf5\x3c\xb8\xfd\x7a\x41\x56\x27\x83\xb5\x80\x0e\x0b\xcc\xa8\x0b\x60\xb0\xf1\x0c\x47\x17\x57\xd3\xdc\x74\x3c\xca\xee\x12\xd6\xe6\x83\xdd\x74\x8b\xa3\xa3\x54\xb6\xca\xca\x05\x6a\xc2\xb2\xeb\x94\xbd\x62\x37\x6d\xce\xbd\xce\x85\xfe\xe8\x93\x1f\xb9\x40\x47\x6c\x2a\x5f\xa8\xab\x6a\xea\x90\xe7\x73\x9e\xae\x3d\xc4\x22\xc8\x5d\x12\x33\xd4\xf2\x4c\x43\x63\x11\xf2\x77\x46\x25\x89\xb6\x94\xae\x55\x82\xef\xc6\x63\x8b\x63\xf0\x91\x38\xcf\x91\x83\x1b\xd9\x51\x28\x5d\x35\xaf\x19\xf7\x76\x41\x0e\x15\x5a\x65\x4e\x25\x9b\xf5\xab\x69\x6e\x02\x46\x5b\xdb\x85\x72\xc4\xf8\xad\xe3\x8c\xdf\xbe\xf6\xf7\x6f\xda\xfb\x6d\xc9\x19\xff\xb6\xe4\xd7\x28\xee\x4e\xdb\x35\x6b\x38\x0a\xd5\x1b\xfd\x7b\xeb\x96\x1d\x48\x73\xd8\x79\x2e\x48\xf3\x46\xcc\x60\x32\xe6\xe9\xbb\x09\x5a\x18\xe3\xe5\x31\xdb\x00\x77\x75\xc9\xd3\xc7\xba\xbc\x3a\xb0\xc4\x82\x80\xa7\xf7\xfe\xe7\x32\xf0\x4b\x18\x66\xeb\x27\xf2\xe1\x69\x57\x23\xa6\xb7\x3c\xfd\x53\x69\x69\xa6\x57\xd8\x1a\xa7\x2d\xd0\x65\xf4\x11\x30\xd6\xe9\xa3\x63\x0b\xcf\x21\x65\xcb\x21\xfe\xfe\xf6\xf5\x75\xf8\xa3\x53\xf7\x1f\x7f\xf4\x67\x5e\xb3\xbc\x3e\xce\x2a\xbc\x42\x71\xf9\x8f\xd9\xeb\x51\x56\xa1\x34\xf2\xf4\x41\xe9\xeb\x13\xd6\x10\x2c\x4f\x7f\x02\xfb\xcf\x71\xca\xb9\xd9\x1b\x19\x43\x68\xfb\x9f\x2d\x4c\xb9\xbd\x87\x0f\x07\x41\x87\x35\x91\xd1\x5d\x2f\xe2\xea\x61\xa9\x88\xfb\x8f\xfd\x58\x84\x37\xe7\x38\x18\x0c\x3d\xb1\x5d\x11\x8b\x7e\xe5\x84\x46\x4d\xf8\x4e\xed\xc8\xfe\x52\x74\x0d\xe6\x11\x3d\xab\x38\xa6\x69\x8d\x49\x3e\xeb\xf9\x9b\x26\x5a\x9d\x0c\xb0\xcf\x0c\xa4\x64\xb7\xf3\xb9\xe8\x8d\x3f\xaa\xbf\xd0\x93\xcf\x05\x4a\xee\x4d\xf6\xb3\xa9\x35\x9d\x00\x93\x76\xe7\x6d\xbe\xad\x3f\x57\xf7\xea\x8c\xa2\x69\xa2\x07\x70\x14\x8e\x2a\xd8\x67\x46\xaa\x44\xc6\x95\x33\xfc\x18\xf4\xfd\xa7\x1a\x2c\x10\x6b\xe1\x0e\xb5\x3e\x47\x1f\x40\x1c\x1f\xa4\x13\x24\x55\xfa\xab\x61\x12\xfc\xc7\x89\x3a\x62\xde\x51\x3e\xef\xdd\x4c\x62\xb1\xe7\x34\x27\x16\x3b\x8e\xbf\xb6\x1e\xe7\xf5\x86\xd6\x1e\x63\x11\x34\xc4\x22\xfc\x1f\xe0\xef\x00\x00\x00\xff\xff\x81\x8f\x61\x6c\x0f\x18\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6159, mode: os.FileMode(436), modTime: time.Unix(1582381291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x8e\xdb\x36\x10\xbe\xf7\x29\x26\xac\xbb\x91\xbb\x96\x64\xa7\x39\x14\x1b\xd1\xe9\x0f\x5a\xa0\x40\x12\x04\xdd\xa2\xa7\xa2\x08\x4d\x8d\x2c\xa2\x14\x29\x90\x23\xef\x1a\x86\x9e\xa1\xd7\x1e\xfa\x0e\x7d\xa7\x3c\x49\x41\xcb\xff\x96\xbd\x41\xab\x93\x48\x0e\xbf\xf9\xe6\x9b\xe1\x90\x59\x49\x95\x9e\x7e\x06\x00\x90\x95\x28\xf2\xee\x77\x3d\xac\x90\x04\xc8\x52\x38\x8f\xc4\x59\x43\x45\xfc\x35\x4b\x4f\xd7\x8d\xa8\x90\xb3\x85\xc2\x87\xda\x3a\x62\x20\xad\x21\x34\xc4\xd9\x83\xca\xa9\xe4\x39\x2e\x94\xc4\x78\x3d\x18\x81\x32\x8a\x94\xd0\xb1\x97\x42\x23\x9f\x24\xe3\x23\x3c\x4f\x4b\x8d\xfb\x71\xf8\xbe\x51\x55\x80\x85\xc6\xe9\xe8\x79\x49\x54\xfb\xbb\x34\x2d\xac\x21\x9f\xcc\xad\x9d\x6b\x14\xb5\xf2\x89\xb4\x55\x2a\xbd\x7f\x5d\x88\x4a\xe9\x25\xff\x51\x39\x71\x7b\x2f\x8c\xbf\xc9\x95\xaf\xb5\x58\x72\xff\x20\xea\x1b\xdf\xcc\x42\x20\x5a\x90\x32\x31\x3e\xd2\xf3\xe1\xab\x8b\xbe\x52\x59\x5a\x12\x49\xa5\x4c\x22\xbd\x3f\x31\xbc\x73\xd6\x12\xac\x8e\xe6\xc2\x17\xc7\x81\x59\xdc\xb1\xb8\x03\x16\x78\x40\xe0\xc1\x46\xe0\x85\xf1\xb1\x47\xa7\x8a\x63\xac\x76\x1f\x7e\x7a\x12\x7f\x46\x8a\x34\x4e\xdf\x20\x09\x87\x44\x08\x95\x35\x8a\xac\xcb\xd2\x6e\xa1\xcb\x59\xba\x4f\x5a\x36\xb3\xf9\xf2\x60\x7f\xae\x16\x20\xb5\xf0\x9e\xb3\x90\x15\xa1\x0c\x3a\x76\xac\x6f\x66\xc4\xce\xc6\x88\xc5\xc9\xea\x29\x8a\x11\x8b\x58\x63\x41\x3d\x66\x5d\x02\x6b\x61\xb6\xb6\x84\x8f\x14\xcf\x1d\x2e\xd9\xf4\x6d\xc7\x1b\x56\xab\xe4\x9e\x04\x61\xf2\x2b\x3a\xaf\xac\x69\xdb\x2c\x0d\x5b\x7a\x9c\xa6\xb9\x5a\x3c\xcd\x45\xa2\xa1\xb3\x90\x76\xc6\x62\x6b\x3a\x73\xc2\xe4\x0c\x4a\x87\x05\x67\x9f\xb3\xbd\xa2\x59\x2a\xfe\xb3\x6f\xa7\xe6\xe5\x45\x21\x0e\x6c\x49\xcc\xfc\x05\xb3\x0d\xcb\x8e\x57\xaa\x4c\x8e\x8f\x49\x38\x8d\x6c\x1a\x64\x6a\x7c\x2f\xbd\xf3\xf0\x84\x24\xb5\x40\x36\x7d\x8b\xe4\x94\xbc\xbc\xeb\x52\x60\xe7\xd3\x59\x6a\xc4\xe9\xd4\x41\x48\xce\x3e\xb0\xe9\x71\x75\x69\x36\xcd\xca\x97\x7b\x0a\xe5\xcb\x69\x87\xdb\x87\x7e\x0c\x05\x0e\x17\xe8\x3c\x3e\x51\x7b\xd2\xea\xf8\x2b\x50\xfe\xba\xf0\xb3\x86\xc8\xee\x6a\x70\x33\xb2\x0d\x69\x65\x10\x94\xb4\x26\xb6\x46\x2f\x19\x58\x23\xb5\x92\x7f\x70\x16\xda\xc3\x7b\xd1\x78\x8c\xa8\x54\x7e\xc8\xa6\x1f\xff\xfc\xe7\x53\xcb\xa2\x67\x6a\xb5\x72\xc2\xcc\x11\x06\x2a\x1f\xc1\xa0\xd6\x96\xe0\x8e\xc3\xa6\xec\xdf\x6b\x4b\xbe\x6d\xaf\xeb\xfa\xa4\x08\x93\xc9\xa5\xe0\x55\x35\x87\xae\xeb\xb2\xc9\x78\xfc\x05\xdb\xed\x2a\x45\xe8\xcc\x0e\xb5\x15\x39\x67\xab\xd5\x9a\x58\xf2\xf3\x7a\xdc\xb6\x0c\xbc\x93\x9c\xa5\x6b\xb3\xc4\x2f\xe6\xaf\x55\xce\x57\xab\x81\xca\xdb\xf6\xc6\xf1\xa3\x1e\x7d\x25\xf4\x5e\xae\x21\x61\x0b\x74\xa4\xa4\xd0\xb1\xd0\x6a\x6e\x9e\x3c\xad\x24\xe6\x70\x29\x71\x01\xce\x57\x42\x6b\x28\x55\x8e\xf1\xa3\xdf\x9e\xea\x34\x44\x94\x3a\xac\xec\x02\x0f\xe8\xb3\xe9\xc7\xbf\xff\xfa\x5f\xe9\x44\xed\xf1\x4a\xca\x94\x8f\x8b\x46\xeb\xee\x7e\x83\x75\xcf\xdb\x36\xa5\x77\x16\x02\x29\xdf\x0f\x6b\xf2\xf6\xb0\xf5\x1f\x99\x64\x5e\x3a\x55\xd3\xf1\x1e\x8d\x04\x75\x28\xd4\x1c\x38\x14\x42\x7b\x3c\xbe\x48\x8a\xc6\x48\x52\xd6\xc0\xbe\xa2\x3b\x15\x87\x3d\x37\xd5\x0e\xe8\x59\xf7\xf7\xea\xcc\x42\x15\x10\x75\x6b\x7d\xfb\xc3\xd7\xa1\x27\x6b\x21\xde\x28\x4f\x49\xa7\x7e\xc4\x36\x59\x63\xc3\x73\xd4\x16\x82\x9e\x9f\x0a\x28\xf2\xfc\x09\x34\x80\x0b\x97\x69\xf8\xa4\x35\x9e\xd6\xef\x17\xf2\xc0\x21\xb7\xb2\xa9\xd0\x50\x32\x47\xfa\x41\x63\xf8\xf5\xdf\x2d\xbf\x0f\xde\xde\x89\x0a\xa3\xcd\x31\x39\xf1\x53\x58\x07\xd1\x01\x12\xd8\x62\x03\xd9\xa7\x4b\x67\xd8\x1d\x34\x74\xc0\x21\x92\x43\xe0\xd3\x0b\x01\x1f\x5a\x03\x87\x3a\x3c\xb4\x7e\x32\x14\xc9\x40\xf1\x5b\x22\xa7\x66\x0d\x61\xc4\x3a\x0b\x36\x1c\xc1\x64\xdc\x23\x03\x6c\xd2\xf5\xec\x7a\xbe\xf6\x1e\xbd\x93\xc0\xe1\xd4\x8b\x77\xb2\x4f\xe4\x3e\xb2\xf7\x6b\x00\xef\x64\xe2\xb0\xd6\x42\x62\x94\xfe\x1e\x25\x5f\x3a\x3e\x8c\x7e\xcb\x6f\x87\x83\x74\x04\x51\x25\x48\x96\x23\xa8\x27\x23\xa8\x5f\xac\x45\xf8\x30\x58\xd5\x93\x76\xb0\xda\xc5\x59\xbf\x58\x47\x74\x3b\x69\x3f\x5c\x73\x9c\xf8\x33\x9e\xa3\x3d\x91\x0b\x3b\xdb\xde\x59\x8f\xf4\x8b\xaa\xd0\x36\x14\x6d\x93\xb4\x85\x1a\x41\x1f\x54\x7b\x3e\xd5\x8b\x31\x19\x8f\xc7\xa3\xae\x30\x86\x57\x1e\x78\x07\xe7\x3a\x4b\xbb\xd7\x5a\x96\x76\x0f\xf0\x7f\x03\x00\x00\xff\xff\x08\x7a\xee\xba\x88\x0b\x00\x00")

func metricsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_metricsHtml,
		"metrics.html",
	)
}

func metricsHtml() (*asset, error) {
	bytes, err := metricsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics.html", size: 2952, mode: os.FileMode(436), modTime: time.Unix(1582381303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"chart/index.html": chartIndexHtml,
	"chart.svg":        chartSvg,
	"chota.min.css":    chotaMinCss,
	"index.html":       indexHtml,
	"metrics.html":     metricsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"chart": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{chartIndexHtml, map[string]*bintree{}},
	}},
	"chart.svg":     &bintree{chartSvg, map[string]*bintree{}},
	"chota.min.css": &bintree{chotaMinCss, map[string]*bintree{}},
	"index.html":    &bintree{indexHtml, map[string]*bintree{}},
	"metrics.html":  &bintree{metricsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
