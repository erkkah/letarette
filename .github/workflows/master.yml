name: Master build

on:
  push:
    branches:
      - masters
      - releasescripts
    tags:
      - v*

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code
      uses: actions/checkout@v1

    - name: Print go environment
      run: go env        

    - name: Cache go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-go-

    - name: Cache go build cache (ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/cache@v1
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-gocache-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-gocache-

    - name: Cache go build cache (macos)
      if: startsWith(matrix.os, 'macos')
      uses: actions/cache@v1
      with:
        path: ~/Library/Caches/go-build
        key: ${{ runner.os }}-gocache-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-gocache-

    - name: Install go-bindata
      run: go get -u github.com/go-bindata/go-bindata/...

    - name: Install sqlite3 libs (ubuntu)
      run: sudo apt-get install -y libsqlite3-dev
      if: startsWith(matrix.os, 'ubuntu')

    - name: Install sqlite3 libs (macos)
      run: brew install sqlite3
      if: startsWith(matrix.os, 'macos')

    - name: Build
      run: make
    
    - name: Test
      run: make test

    - name: Collect licenses
      if: startsWith(matrix.os, 'ubuntu')
      run: ./licenses.sh

    - name: Save license info
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v1
      with:
        name: licenses
        path: licenses

    - name: Save artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{ format('letarette-{0}', matrix.os) }}
        path: letarette

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Set TAG
        run: echo ::set-env name=TAG::$(echo ${GITHUB_REF:10})

      - name: Set ARCHIVE
        run: echo ::set-env name=ARCHIVE::letarette-${TAG}.zip

      - uses: actions/download-artifact@v1.0.0
        with:
          name: letarette-macos-latest
          path: macos/letarette

      - uses: actions/download-artifact@v1.0.0
        with:
          name: letarette-ubuntu-latest
          path: linux/letarette

      - uses: actions/download-artifact@v1.0.0
        with:
          name: licenses
          path: licenses

      - name: Pack release
        id: pack-release
        run: zip -r $ARCHIVE linux macos licenses

      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: true
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE }}
          asset_name: ${{ env.ARCHIVE }}
          asset_content_type: application/zip
