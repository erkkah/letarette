name: Release build

on:
  push:
    tags:
      - 'v*'

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        go-version: [1.16]
    steps:

    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
      id: go

    - name: Check out code
      uses: actions/checkout@v1

    - name: Cache go modules
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-go-

    - name: Get GOCACHE
      run: go run github.com/erkkah/bygg gocache >> $GITHUB_ENV
      shell: bash
    
    - name: Cache go build cache
      uses: actions/cache@v1
      with:
        path: ${{ env.GOCACHE }}
        key: ${{ runner.os }}-gocache-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-gocache-

    - name: Build
      run: go run github.com/erkkah/bygg
    
    - name: Test
      run: go run github.com/erkkah/bygg test

    - name: Collect licenses
      if: startsWith(matrix.os, 'ubuntu')
      run: ./licenses.sh

    - name: Save license info
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v1
      with:
        name: licenses
        path: licenses

    - name: Save change log
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v1
      with:
        name: changelog
        path: CHANGELOG.md
    
    - name: Pack binaries
      run: tar czf binaries.tgz letarette lrcli lrload

    - name: Save artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{ format('letarette-{0}', matrix.os) }}
        path: binaries.tgz

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Set TAG
        run: echo TAG=${GITHUB_REF:10} >> $GITHUB_ENV

      - name: Set ARCHIVE
        run: echo ARCHIVE=letarette-${TAG}.tgz >> $GITHUB_ENV

      - uses: actions/download-artifact@v1.0.0
        with:
          name: letarette-macos-latest
          path: macos

      - uses: actions/download-artifact@v1.0.0
        with:
          name: letarette-ubuntu-latest
          path: linux

      - uses: actions/download-artifact@v1.0.0
        with:
          name: letarette-windows-latest
          path: windows

      - uses: actions/download-artifact@v1.0.0
        with:
          name: licenses
          path: licenses

      - uses: actions/download-artifact@v1.0.0
        with:
          name: changelog
          path: .

      - name: Unpack binaries
        run: for os in linux macos windows; do (cd $os && tar xzf binaries.tgz && rm binaries.tgz); done

      - name: Pack release
        id: pack-release
        run: tar czf $ARCHIVE linux macos windows licenses CHANGELOG.md

      - name: Load changelog
        id: changelog
        run: echo "::set-output name=body::$(cat CHANGELOG.md | sed -e 's/%/%25/g' | sed -e ':begin;$!N;s/\n/%0A/;tbegin')"

      - name: Create release
        id: create_release
        uses: actions/create-release@master
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ env.TAG }}
          body: ${{ steps.changelog.outputs.body }}
          draft: true
          prerelease: true
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE }}
          asset_name: ${{ env.ARCHIVE }}
          asset_content_type: application/tar+gzip
